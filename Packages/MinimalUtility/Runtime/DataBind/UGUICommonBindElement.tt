<#@ template language="C#" linePragmas="false"#>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#
    var enables = new string[]
    {
        "Button",
        "Image",
        "RawImage",
        "Scrollbar",
        "ScrollRect",
        "SimpleGauge",
        "Slider",
        "TextMeshProUGUI",
        "TMP_Dropdown",
        "TMP_InputField",
        "Toggle",
    };

    var graphics = new string[]
    {
        "Image",
        "RawImage",
        "TextMeshProUGUI",
    };

    var interactables = new string[]
    {
        "Button",
        "Dropdown",
        "Scrollbar",
        "Slider",
        "TMP_Dropdown",
        "TMP_InputField",
        "Toggle",
    };

    var textmeshpros = new string[]
    {
        "TextMeshProUGUI",
        "TMP_Dropdown",
        "TMP_InputField"
    };
#>
#if ENABLE_UGUI
#nullable enable

using MinimalUtility.UGUI;
#if ENABLE_TEXTMESHPRO
using TMPro;
#endif
using UnityEngine.UI;

namespace MinimalUtility.DataBind
{
<# foreach (var typeStr in enables) { #>
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#if ENABLE_TEXTMESHPRO" : "" #>
    [DataBindMenu(nameof(<#= typeStr #>) + "/" + nameof(<#= typeStr #>.enabled))]
    internal sealed class <#= typeStr #>EnableElement : EnableElement<<#= typeStr #>>
    {
        private <#= typeStr #>EnableElement() : base()
        {
        }
    }
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#endif" : "" #>
<# } #>
<# foreach (var typeStr in graphics) { #>
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#if ENABLE_TEXTMESHPRO" : "" #>
    [DataBindMenu(nameof(<#= typeStr #>) + "/" + nameof(<#= typeStr #>.color))]
    internal sealed class <#= typeStr #>ColorElement : ColorElement<<#= typeStr #>>
    {
        private <#= typeStr #>ColorElement() : base()
        {
        }
    }

    [DataBindMenu(nameof(<#= typeStr #>) + "/" + nameof(<#= typeStr #>.raycastTarget))]
    internal sealed class <#= typeStr #>RaycastTargetElement : RaycastTargetElement<<#= typeStr #>>
    {
        private <#= typeStr #>RaycastTargetElement() : base()
        {
        }
    }
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#endif" : "" #>
<# } #>
<# foreach (var typeStr in interactables) { #>
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#if ENABLE_TEXTMESHPRO" : "" #>
    [DataBindMenu(nameof(<#= typeStr #>) + "/" + nameof(<#= typeStr #>.interactable))]
    internal sealed class <#= typeStr #>InteractableElement : InteractableElement<<#= typeStr #>>
    {
        private <#= typeStr #>InteractableElement() : base()
        {
        }
    }
<#= Array.IndexOf(textmeshpros, typeStr) != -1 ? "#endif" : "" #>
<# } #>
}

#endif
