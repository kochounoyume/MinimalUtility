{
  "api/MinimalUtility.ApproximatelyCollection-1.html": {
    "href": "api/MinimalUtility.ApproximatelyCollection-1.html",
    "title": "Class ApproximatelyCollection<TValue> | |",
    "keywords": "Class ApproximatelyCollection<TValue> Namespace MinimalUtility 近似値を算出するためのコレクション. public sealed class ApproximatelyCollection<TValue> : IReadOnlyList<KeyValuePair<float, TValue>>, IReadOnlyCollection<KeyValuePair<float, TValue>>, IEnumerable<KeyValuePair<float, TValue>>, IEnumerable Type Parameters TValue 値の型. Inheritance object ApproximatelyCollection<TValue> Implements IReadOnlyList<KeyValuePair<float, TValue>> IReadOnlyCollection<KeyValuePair<float, TValue>> IEnumerable<KeyValuePair<float, TValue>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ApproximatelyCollection(in int) Initializes a new instance of the ApproximatelyCollection<TValue> class. public ApproximatelyCollection(in int capacity) Parameters capacity int コレクションの要素制限（後で変更する気はない）. ApproximatelyCollection(in int, in float) Initializes a new instance of the ApproximatelyCollection<TValue> class. public ApproximatelyCollection(in int capacity, in float reach) Parameters capacity int コレクションの要素制限（後で変更する気はない）. reach float 近似値を算出する値の範囲. Properties Count Gets the number of elements in the collection. public int Count { get; } Property Value int The number of elements in the collection. this[int] Gets the element at the specified index in the read-only list. public KeyValuePair<float, TValue> this[int index] { get; } Parameters index int The zero-based index of the element to get. Property Value KeyValuePair<float, TValue> The element at the specified index in the read-only list. this[float] インデクサ. public TValue[] this[float key] { get; } Parameters key float キー. Property Value TValue[] Reach 近似値を算出する値の範囲. public float Reach { get; set; } Property Value float Methods Add(in KeyValuePair<float, TValue>) 要素を追加します. public void Add(in KeyValuePair<float, TValue> pair) Parameters pair KeyValuePair<float, TValue> 追加する要素. Add(in float, TValue) 要素を追加します. public void Add(in float key, TValue value) Parameters key float 実際に近似値を算出するために使用される値. value TValue 追加する値. Add(in float, ref TValue) 要素を追加します. public void Add(in float key, ref TValue value) Parameters key float 実際に近似値を算出するために使用される値. value TValue 追加する値. AsReadOnlySpan() ReadOnlySpan<T>に変換します. public ReadOnlySpan<KeyValuePair<float, TValue>> AsReadOnlySpan() Returns ReadOnlySpan<KeyValuePair<float, TValue>> 変換後のReadOnlySpan<T>. GetEnumerator() Returns an enumerator that iterates through the collection. public IEnumerator<KeyValuePair<float, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<float, TValue>> An enumerator that can be used to iterate through the collection. ToDictionary() Dictionary<TKey, TValue>に変換します. public Dictionary<float, TValue> ToDictionary() Returns Dictionary<float, TValue> 変換後のDictionary<TKey, TValue>. Operators explicit operator Dictionary<float, TValue>(ApproximatelyCollection<TValue>) public static explicit operator Dictionary<float, TValue>(ApproximatelyCollection<TValue> collection) Parameters collection ApproximatelyCollection<TValue> Returns Dictionary<float, TValue> explicit operator ReadOnlySpan<KeyValuePair<float, TValue>>(ApproximatelyCollection<TValue>) public static explicit operator ReadOnlySpan<KeyValuePair<float, TValue>>(ApproximatelyCollection<TValue> collection) Parameters collection ApproximatelyCollection<TValue> Returns ReadOnlySpan<KeyValuePair<float, TValue>>"
  },
  "api/MinimalUtility.ButtonAttribute.html": {
    "href": "api/MinimalUtility.ButtonAttribute.html",
    "title": "Class ButtonAttribute | |",
    "keywords": "Class ButtonAttribute Namespace MinimalUtility 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. [Conditional(\"UNITY_EDITOR\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ButtonAttribute : Attribute Inheritance object Attribute ButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonAttribute(params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(params object[] parameters) Parameters parameters object[] 引数. ButtonAttribute(string, params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(string buttonName, params object[] parameters) Parameters buttonName string ボタンの名前. parameters object[] 引数. Properties ButtonName ボタンの名前. public string ButtonName { get; set; } Property Value string Parameters 引数. public ref readonly object[] Parameters { get; } Property Value object[]"
  },
  "api/MinimalUtility.CustomButtonBase.html": {
    "href": "api/MinimalUtility.CustomButtonBase.html",
    "title": "Class CustomButtonBase | |",
    "keywords": "Class CustomButtonBase Namespace MinimalUtility カスタムボタンのベース実装. public abstract class CustomButtonBase : Selectable, IPointerClickHandler Inheritance object CustomButtonBase Implements IPointerClickHandler Methods OnPointerClick(ref PointerEventData) クリックを検出して実行するコールバックです. protected abstract void OnPointerClick(ref PointerEventData eventData) Parameters eventData PointerEventData タッチイベントの関連情報."
  },
  "api/MinimalUtility.DictionaryExtensions.html": {
    "href": "api/MinimalUtility.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | |",
    "keywords": "Class DictionaryExtensions Namespace MinimalUtility public static class DictionaryExtensions Inheritance object DictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToProximityCollection<TValue>(Dictionary<float, TValue>, in int) Dictionary<TKey, TValue>をApproximatelyCollection<TValue>に変換します. public static ApproximatelyCollection<TValue> ToProximityCollection<TValue>(this Dictionary<float, TValue> dictionary, in int buffer = 3) Parameters dictionary Dictionary<float, TValue> 変換元のDictionary<TKey, TValue>. buffer int 近似値を算出する値の範囲. Returns ApproximatelyCollection<TValue> 変換後のApproximatelyCollection<TValue>. Type Parameters TValue 値の型."
  },
  "api/MinimalUtility.DisposableExtensions.html": {
    "href": "api/MinimalUtility.DisposableExtensions.html",
    "title": "Class DisposableExtensions | |",
    "keywords": "Class DisposableExtensions Namespace MinimalUtility IDisposableの拡張メソッド. public static class DisposableExtensions Inheritance object DisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTo<T>(T, ref IDisposable) IDisposableを指定したIDisposableコンテナに追加します. public static void AddTo<T>(this T disposable, ref IDisposable disposableContainer) where T : class, IDisposable Parameters disposable T 任意のIDisposable実装クラスの参照. disposableContainer IDisposable 追加先のIDisposableコンテナ. Type Parameters T 追加したIDisposable."
  },
  "api/MinimalUtility.Math.html": {
    "href": "api/MinimalUtility.Math.html",
    "title": "Class Math | |",
    "keywords": "Class Math Namespace MinimalUtility 最小限の数学関数. public static class Math Inheritance object Math Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Deg2Rad 度からラジアンに変換する定数（読み取り専用）. public const float Deg2Rad = 0.017453292 Field Value float Infinity 無限大（読み取り専用）. public const float Infinity = Infinity Field Value float NegativeInfinity 負の無限大（読み取り専用）. public const float NegativeInfinity = -Infinity Field Value float PI 円周率（読み取り専用）. public const float PI = 3.1415927 Field Value float Rad2Deg ラジアンから度に変換する定数（読み取り専用）. public const float Rad2Deg = 57.29578 Field Value float Properties Epsilon ごくわずかな浮動小数点の値（読み取り専用）. public static float Epsilon { get; } Property Value float Methods Abs(in int) /value/の絶対値を返します. public static int Abs(in int value) Parameters value int 任意の整数値. Returns int 求めた絶対値. Abs(in float) /f/の絶対値を返します. public static float Abs(in float f) Parameters f float 任意の浮動小数点値. Returns float 求めた絶対値. Approximately(in float, in float) 2つの浮動小数点値を比較し、近似している場合は true を返します. public static bool Approximately(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns bool 近似している場合は true. Max(in int, in int) 2つ以上の値から最大値を返します. public static int Max(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最大値. Max(in float, in float) 2つ以上の値から最大値を返します. public static float Max(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最大値. Min(in int, in int) 2つ以上の値から最小値を返します. public static int Min(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最小値. Min(in float, in float) 2つ以上の値から最小値を返します. public static float Min(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最小値."
  },
  "api/MinimalUtility.RectTransformExtensions.html": {
    "href": "api/MinimalUtility.RectTransformExtensions.html",
    "title": "Class RectTransformExtensions | |",
    "keywords": "Class RectTransformExtensions Namespace MinimalUtility RectTransformの拡張メソッド. public static class RectTransformExtensions Inheritance object RectTransformExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods SetSafeSize(RectTransform, in float, in float) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, in float sizeX, in float sizeY) Parameters target RectTransform 対象のRectTransform. sizeX float 横の長さ. sizeY float 縦の長さ."
  },
  "api/MinimalUtility.SourceGenerator.EnableInitAccessorGenerator.html": {
    "href": "api/MinimalUtility.SourceGenerator.EnableInitAccessorGenerator.html",
    "title": "Class EnableInitAccessorGenerator | |",
    "keywords": "Class EnableInitAccessorGenerator Namespace MinimalUtility.SourceGenerator public sealed class EnableInitAccessorGenerator : IIncrementalGenerator Inheritance object EnableInitAccessorGenerator"
  },
  "api/MinimalUtility.SourceGenerator.EnumEqualityComparerGenerator.html": {
    "href": "api/MinimalUtility.SourceGenerator.EnumEqualityComparerGenerator.html",
    "title": "Class EnumEqualityComparerGenerator | |",
    "keywords": "Class EnumEqualityComparerGenerator Namespace MinimalUtility.SourceGenerator public sealed class EnumEqualityComparerGenerator : IIncrementalGenerator Inheritance object EnumEqualityComparerGenerator"
  },
  "api/MinimalUtility.SourceGenerator.html": {
    "href": "api/MinimalUtility.SourceGenerator.html",
    "title": "Namespace MinimalUtility.SourceGenerator | |",
    "keywords": "Namespace MinimalUtility.SourceGenerator Classes EnableInitAccessorGenerator EnumEqualityComparerGenerator"
  },
  "api/MinimalUtility.html": {
    "href": "api/MinimalUtility.html",
    "title": "Namespace MinimalUtility | |",
    "keywords": "Namespace MinimalUtility Classes ApproximatelyCollection<TValue> 近似値を算出するためのコレクション. ButtonAttribute 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. CustomButtonBase カスタムボタンのベース実装. DictionaryExtensions DisposableExtensions IDisposableの拡張メソッド. Math 最小限の数学関数. RectTransformExtensions RectTransformの拡張メソッド."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2024 Masatake Iwasaki Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "MinimalUtility | |",
    "keywords": "MinimalUtility Minimal utility library. 1. Installation Add the package via git from Package Manager. If you are using Unity 2019.1 or later, you can use Package Manager to install a package via git. https://github.com/kochounoyume/MinimalUtility.git?path=Packages/MinimalUtility 2. StyleCopAnalyzers The repository incorporates StyleCopAnalyzers to improve development efficiency. Some rules have been disabled, but naming conventions and other rules basically follow those set out by StyleCopAnalyzers. Note As mentioned earlier, this repository contains StyleCopAnalyzers, but that has no effect on importing them into your Unity environment as a package. StyleCopAnalyzers is merely a code maintenance role in this repository. Therefore, you do not have to follow the naming conventions and other rules of StyleCopAnalyzers when you introduce the MnimalUtility. License MIT License Copyright (c) Tunnel Vision Laboratories, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}