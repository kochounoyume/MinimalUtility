{
  "api/Cysharp.Threading.Tasks.UniTask.html": {
    "href": "api/Cysharp.Threading.Tasks.UniTask.html",
    "title": "Struct UniTask | |",
    "keywords": "Struct UniTask Namespace Cysharp.Threading.Tasks public struct UniTask Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Defer<T>(T, Func<T, UniTask>) Defer the task creation just before call await. public static UniTask Defer<T>(T state, Func<T, UniTask> factory) Parameters state T factory Func<T, UniTask> Returns UniTask Type Parameters T Defer<TState, TResult>(TState, Func<TState, UniTask<TResult>>) Defer the task creation just before call await. public static UniTask<TResult> Defer<TState, TResult>(TState state, Func<TState, UniTask<TResult>> factory) Parameters state TState factory Func<TState, UniTask<TResult>> Returns UniTask<TResult> Type Parameters TState TResult WaitUntil<T>(T, Func<T, bool>, PlayerLoopTiming, CancellationToken, bool) public static UniTask WaitUntil<T>(T state, Func<T, bool> predicate, PlayerLoopTiming timing = null, CancellationToken cancellationToken = default, bool cancelImmediately = false) Parameters state T predicate Func<T, bool> timing PlayerLoopTiming cancellationToken CancellationToken cancelImmediately bool Returns UniTask Type Parameters T WaitWhile<T>(T, Func<T, bool>, PlayerLoopTiming, CancellationToken, bool) public static UniTask WaitWhile<T>(T state, Func<T, bool> predicate, PlayerLoopTiming timing = null, CancellationToken cancellationToken = default, bool cancelImmediately = false) Parameters state T predicate Func<T, bool> timing PlayerLoopTiming cancellationToken CancellationToken cancelImmediately bool Returns UniTask Type Parameters T"
  },
  "api/Cysharp.Threading.Tasks.UniTaskInternalAccessor.html": {
    "href": "api/Cysharp.Threading.Tasks.UniTaskInternalAccessor.html",
    "title": "Class UniTaskInternalAccessor | |",
    "keywords": "Class UniTaskInternalAccessor Namespace Cysharp.Threading.Tasks public static class UniTaskInternalAccessor Inheritance object UniTaskInternalAccessor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEqualityComparer<T>() Get default equality comparer for T. public static IEqualityComparer<T> GetEqualityComparer<T>() Returns IEqualityComparer<T> Default equality comparer for T. Type Parameters T Type of T."
  },
  "api/Cysharp.Threading.Tasks.html": {
    "href": "api/Cysharp.Threading.Tasks.html",
    "title": "Namespace Cysharp.Threading.Tasks | |",
    "keywords": "Namespace Cysharp.Threading.Tasks Classes UniTaskInternalAccessor Structs UniTask"
  },
  "api/Global.Fruits.html": {
    "href": "api/Global.Fruits.html",
    "title": "Enum Fruits | |",
    "keywords": "Enum Fruits Namespace Global public enum Fruits Fields Apple = 0 Banana = 1 Orange = 2"
  },
  "api/Global.UnityWebRequestHttpMessageHandler.html": {
    "href": "api/Global.UnityWebRequestHttpMessageHandler.html",
    "title": "Class UnityWebRequestHttpMessageHandler | |",
    "keywords": "Class UnityWebRequestHttpMessageHandler Namespace Global public class UnityWebRequestHttpMessageHandler : HttpMessageHandler, IDisposable Inheritance object HttpMessageHandler UnityWebRequestHttpMessageHandler Implements IDisposable Inherited Members HttpMessageHandler.Dispose() HttpMessageHandler.Dispose(bool) HttpMessageHandler.Send(HttpRequestMessage, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Methods SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage, CancellationToken cancellationToken) Parameters requestMessage HttpRequestMessage cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null. SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage, CancellationToken cancellationToken) Parameters requestMessage HttpRequestMessage cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null."
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Classes UnityWebRequestHttpMessageHandler Enums Fruits"
  },
  "api/MinimalUtility.ButtonAttribute.html": {
    "href": "api/MinimalUtility.ButtonAttribute.html",
    "title": "Class ButtonAttribute | |",
    "keywords": "Class ButtonAttribute Namespace MinimalUtility 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. [Conditional(\"UNITY_EDITOR\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ButtonAttribute : Attribute Inheritance object Attribute ButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonAttribute(params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(params object[] parameters) Parameters parameters object[] 引数. ButtonAttribute(string, params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(string buttonName, params object[] parameters) Parameters buttonName string ボタンの名前. parameters object[] 引数. Properties ButtonName ボタンの名前. public string ButtonName { get; set; } Property Value string Parameters 引数. public ref readonly object[] Parameters { get; } Property Value object[]"
  },
  "api/MinimalUtility.CommonObjectPool-1.PoolSizeSetting.html": {
    "href": "api/MinimalUtility.CommonObjectPool-1.PoolSizeSetting.html",
    "title": "Struct CommonObjectPool<T>.PoolSizeSetting | |",
    "keywords": "Struct CommonObjectPool<T>.PoolSizeSetting Namespace MinimalUtility プールの初期容量と最大サイズを指定する構造体. public readonly struct CommonObjectPool<T>.PoolSizeSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PoolSizeSetting(in int, in int) Initializes a new instance of the CommonObjectPool<T>.PoolSizeSetting struct. public PoolSizeSetting(in int defaultCapacity, in int maxSize) Parameters defaultCapacity int スタックが作成されるときの初期容量. maxSize int プールの最大サイズ."
  },
  "api/MinimalUtility.CommonObjectPool-1.html": {
    "href": "api/MinimalUtility.CommonObjectPool-1.html",
    "title": "Class CommonObjectPool<T> | |",
    "keywords": "Class CommonObjectPool<T> Namespace MinimalUtility 汎用オブジェクトプール実装. public class CommonObjectPool<T> : IDisposable, IObjectPool<T>, UnityEngine.Pool.IObjectPool<T> where T : MonoBehaviour Type Parameters T プールするオブジェクトの型. Inheritance object CommonObjectPool<T> Implements IDisposable IObjectPool<T> IObjectPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Constructors CommonObjectPool(T, Transform, PoolSizeSetting) Initializes a new instance of the CommonObjectPool<T> class. public CommonObjectPool(T prefab, Transform root, CommonObjectPool<T>.PoolSizeSetting setting) Parameters prefab T プール対象のプレハブ. root Transform プールから取得されたインスタンスに指定する親オブジェクト. setting CommonObjectPool<T>.PoolSizeSetting プールの初期容量と最大サイズ. Properties CountInactive public int CountInactive { get; } Property Value int Methods Clear() public void Clear() Get() public T Get() Returns T Get(out T) public PooledObject<T> Get(out T v) Parameters v T Returns PooledObject<T> GetWithToken(out T) プールからインスタンスとキャンセルトークンを取得する.プールが空の場合は、新しいインスタンスが作成される. public CancellationToken GetWithToken(out T v) Parameters v T 取得したインスタンス. Returns CancellationToken インスタンスがプールに戻ったときにキャンセルされるトークン. Release(T) public void Release(T element) Parameters element T ReleaseAll(Action<T>) 取得済みの全てのオブジェクトを解放する. public void ReleaseAll(Action<T> preReleaseCallback = null) Parameters preReleaseCallback Action<T> 解放前に呼び出すコールバック."
  },
  "api/MinimalUtility.ComponentExtensions.html": {
    "href": "api/MinimalUtility.ComponentExtensions.html",
    "title": "Class ComponentExtensions | |",
    "keywords": "Class ComponentExtensions Namespace MinimalUtility Componentの拡張メソッド. public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetComponentInOnlyChild<T>(Component) 子オブジェクトのTコンポーネントを取得する. Component.GetComponentInChildren<T>()と異なり、孫オブジェクト以降は検索しない. public static T GetComponentInOnlyChild<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns T 取得したコンポーネントインスタンス. Type Parameters T 取得したいコンポーネントの型. GetComponentsInOnlyChildren<T>(Component) 子オブジェクトのTコンポーネントを全て取得する. Component.GetComponentsInChildren<T>()と異なり、孫オブジェクト以降は検索しない. public static IReadOnlyList<T> GetComponentsInOnlyChildren<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns IReadOnlyList<T> 取得したコンポーネントインスタンスのコレクション. Type Parameters T 取得したいコンポーネントの型. TryGetComponentInOnlyChild<T>(Component, out T) 子オブジェクトのTコンポーネントを取得する. public static bool TryGetComponentInOnlyChild<T>(this Component self, out T component) where T : Component Parameters self Component 対象のComponent. component T 取得したコンポーネントインスタンス. Returns bool コンポーネントが取得できた場合はtrue. Type Parameters T 取得したいコンポーネントの型."
  },
  "api/MinimalUtility.DisposableExtensions.html": {
    "href": "api/MinimalUtility.DisposableExtensions.html",
    "title": "Class DisposableExtensions | |",
    "keywords": "Class DisposableExtensions Namespace MinimalUtility IDisposableの拡張メソッド. public static class DisposableExtensions Inheritance object DisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTo<T>(T, ref IDisposable) IDisposableを指定したIDisposableコンテナに追加します. public static void AddTo<T>(this T disposable, ref IDisposable disposableContainer) where T : class, IDisposable Parameters disposable T 任意のIDisposable実装クラスの参照. disposableContainer IDisposable 追加先のIDisposableコンテナ. Type Parameters T 追加したIDisposable."
  },
  "api/MinimalUtility.Editor.AnimatorInspector.html": {
    "href": "api/MinimalUtility.Editor.AnimatorInspector.html",
    "title": "Class AnimatorInspector | |",
    "keywords": "Class AnimatorInspector Namespace MinimalUtility.Editor Animator.keepAnimatorStateOnDisableやAnimator.writeDefaultValuesOnDisableも編集できる Animatorカスタムエディタ. public class AnimatorInspector : UnityComponentInspector<Animator> Inheritance object UnityComponentInspector<Animator> AnimatorInspector Inherited Members UnityComponentInspector<Animator>.Target UnityComponentInspector<Animator>.OnDisable() Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected override string InspectorTypeName { get; } Property Value string Methods OnEnable() ロードされたときに呼び出される. protected override void OnEnable() OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.DefaultInspector.html": {
    "href": "api/MinimalUtility.Editor.DefaultInspector.html",
    "title": "Class DefaultInspector | |",
    "keywords": "Class DefaultInspector Namespace MinimalUtility.Editor デフォルトのインスペクタービュー. public class DefaultInspector : Editor Inheritance object DefaultInspector Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.MinimalEditorUtility.html": {
    "href": "api/MinimalUtility.Editor.MinimalEditorUtility.html",
    "title": "Class MinimalEditorUtility | |",
    "keywords": "Class MinimalEditorUtility Namespace MinimalUtility.Editor エディタ拡張のユーティリティクラス. public static class MinimalEditorUtility Inheritance object MinimalEditorUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TrTextContent(string, string, Texture) Unity組み込みリソースからGUIContentを取得するか、GUI要素のGUIContentを作成する. public static GUIContent TrTextContent(string text, string tooltip = null, Texture icon = null) Parameters text string GUIContentのテキスト. tooltip string カーソルを合わせたときに表示されるツールチップ. icon Texture GUIContentのアイコン. Returns GUIContent GUIContent."
  },
  "api/MinimalUtility.Editor.SimpleGaugeEditor.html": {
    "href": "api/MinimalUtility.Editor.SimpleGaugeEditor.html",
    "title": "Class SimpleGaugeEditor | |",
    "keywords": "Class SimpleGaugeEditor Namespace MinimalUtility.Editor SimpleGaugeのカスタムエディタ. public class SimpleGaugeEditor : Editor Inheritance object SimpleGaugeEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.TransformInspector.html": {
    "href": "api/MinimalUtility.Editor.TransformInspector.html",
    "title": "Class TransformInspector | |",
    "keywords": "Class TransformInspector Namespace MinimalUtility.Editor ワールドの座標・回転・大きさも表示するTransformカスタムエディタ. public class TransformInspector : UnityComponentInspector<Transform> Inheritance object UnityComponentInspector<Transform> TransformInspector Inherited Members UnityComponentInspector<Transform>.Target UnityComponentInspector<Transform>.OnEnable() UnityComponentInspector<Transform>.OnDisable() Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected override string InspectorTypeName { get; } Property Value string Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.UnityComponentInspector-1.html": {
    "href": "api/MinimalUtility.Editor.UnityComponentInspector-1.html",
    "title": "Class UnityComponentInspector<T> | |",
    "keywords": "Class UnityComponentInspector<T> Namespace MinimalUtility.Editor 既存のUnityコンポーネントのカスタムエディタを作成するための基底クラスです. public abstract class UnityComponentInspector<T> : Editor where T : UnityEngine.Component Type Parameters T カスタムエディタを作成するコンポーネントの型. Inheritance object UnityComponentInspector<T> Derived AnimatorInspector TransformInspector Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected abstract string InspectorTypeName { get; } Property Value string Target 対象となるコンポーネントのインスタンス. protected T Target { get; } Property Value T Methods OnDisable() オブジェクトがスコープ外になったときに呼び出される. protected virtual void OnDisable() OnEnable() ロードされたときに呼び出される. protected virtual void OnEnable() OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.html": {
    "href": "api/MinimalUtility.Editor.html",
    "title": "Namespace MinimalUtility.Editor | |",
    "keywords": "Namespace MinimalUtility.Editor Classes AnimatorInspector Animator.keepAnimatorStateOnDisableやAnimator.writeDefaultValuesOnDisableも編集できる Animatorカスタムエディタ. DefaultInspector デフォルトのインスペクタービュー. MinimalEditorUtility エディタ拡張のユーティリティクラス. SimpleGaugeEditor SimpleGaugeのカスタムエディタ. TransformInspector ワールドの座標・回転・大きさも表示するTransformカスタムエディタ. UnityComponentInspector<T> 既存のUnityコンポーネントのカスタムエディタを作成するための基底クラスです."
  },
  "api/MinimalUtility.EmptyGraphic.html": {
    "href": "api/MinimalUtility.EmptyGraphic.html",
    "title": "Class EmptyGraphic | |",
    "keywords": "Class EmptyGraphic Namespace MinimalUtility 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき public class EmptyGraphic : Graphic Inheritance object EmptyGraphic Derived MinimalSelectableGraphic Methods OnPopulateMesh(VertexHelper) protected override void OnPopulateMesh(VertexHelper vh) Parameters vh VertexHelper SetMaterialDirty() public override void SetMaterialDirty() SetVerticesDirty() public override void SetVerticesDirty()"
  },
  "api/MinimalUtility.EqualityComparer.html": {
    "href": "api/MinimalUtility.EqualityComparer.html",
    "title": "Class EqualityComparer | |",
    "keywords": "Class EqualityComparer Namespace MinimalUtility EqualityComparer<T>の拡張クラス. public static class EqualityComparer Inheritance object EqualityComparer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(Func<T, T, bool>, Func<T, int>) 指定した比較処理を使用してEqualityComparer<T>を生成します. public static EqualityComparer<T> Create<T>(Func<T, T, bool> equals, Func<T, int> getHashCode) Parameters equals Func<T, T, bool> Equals(T, T)に使用する処理. getHashCode Func<T, int> GetHashCode(T)に使用する処理. Returns EqualityComparer<T> 生成されたEqualityComparer<T>. Type Parameters T 比較対象の型. Exceptions ArgumentNullException equalsがnullです. NotSupportedException getHashCodeがnullです."
  },
  "api/MinimalUtility.GenerateStringConverterAttribute.html": {
    "href": "api/MinimalUtility.GenerateStringConverterAttribute.html",
    "title": "Class GenerateStringConverterAttribute | |",
    "keywords": "Class GenerateStringConverterAttribute Namespace MinimalUtility Enumの文字列変換クラスを自動生成するための属性. 以下のようなコードが自動生成されます. using System; namespace MinimalUtility.MultiLibraries { public partial class MemoryUnitStringConverter { private readonly string[] names = new string[] { \"B\", \"KB\", \"MB\", \"GB\", }; public ReadOnlySpan<string> MemberNames => names; public ReadOnlySpan<DebugProfiler.MemoryUnit> MemberValues => new DebugProfiler.MemoryUnit[] { DebugProfiler.MemoryUnit.B, DebugProfiler.MemoryUnit.KB, DebugProfiler.MemoryUnit.MB, DebugProfiler.MemoryUnit.GB, }; public ref readonly string Convert(in DebugProfiler.MemoryUnit value) { switch ((int)value) { case 0: return ref names[0]; case 1: return ref names[1]; case 2: return ref names[2]; case 3: return ref names[3]; default: return ref string.Empty; } } public DebugProfiler.MemoryUnit ReverseConvert(in string name) { switch (Array.IndexOf(names, name)) { case 0: return DebugProfiler.MemoryUnit.B; case 1: return DebugProfiler.MemoryUnit.KB; case 2: return DebugProfiler.MemoryUnit.MB; case 3: return DebugProfiler.MemoryUnit.GB; default: throw new InvalidCastException(name); } } } } [AttributeUsage(AttributeTargets.Enum, Inherited = false, AllowMultiple = false)] public sealed class GenerateStringConverterAttribute : Attribute, Attribute Inheritance object Attribute GenerateStringConverterAttribute Implements Attribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateStringConverterAttribute(bool) Initializes a new instance of the GenerateStringConverterAttribute class. public GenerateStringConverterAttribute(bool autoGenerate = false) Parameters autoGenerate bool trueの場合、列挙を列挙のプロパティ名と同じ文字列に変換するクラスを自動的に生成します. GenerateStringConverterAttribute(bool) Initializes a new instance of the GenerateStringConverterAttribute class. public GenerateStringConverterAttribute(bool autoGenerate = false) Parameters autoGenerate bool trueの場合、列挙を列挙のプロパティ名と同じ文字列に変換するクラスを自動的に生成します."
  },
  "api/MinimalUtility.IObjectPool-1.html": {
    "href": "api/MinimalUtility.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | |",
    "keywords": "Interface IObjectPool<T> Namespace MinimalUtility ObjectPoolを提供するインターフェイス. public interface IObjectPool<T> : UnityEngine.Pool.IObjectPool<T> where T : MonoBehaviour Type Parameters T プールするオブジェクトの型. Methods GetWithToken(out T) プールからインスタンスとキャンセルトークンを取得する.プールが空の場合は、新しいインスタンスが作成される. CancellationToken GetWithToken(out T v) Parameters v T 取得したインスタンス. Returns CancellationToken インスタンスがプールに戻ったときにキャンセルされるトークン. ReleaseAll(Action<T>) 取得済みの全てのオブジェクトを解放する. void ReleaseAll(Action<T> preReleaseCallback = null) Parameters preReleaseCallback Action<T> 解放前に呼び出すコールバック."
  },
  "api/MinimalUtility.Math.html": {
    "href": "api/MinimalUtility.Math.html",
    "title": "Class Math | |",
    "keywords": "Class Math Namespace MinimalUtility 最小限の数学関数. public static class Math Inheritance object Math Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Deg2Rad 度からラジアンに変換する定数（読み取り専用）. public const float Deg2Rad = 0.017453292 Field Value float Infinity 無限大（読み取り専用）. public const float Infinity = Infinity Field Value float NegativeInfinity 負の無限大（読み取り専用）. public const float NegativeInfinity = -Infinity Field Value float PI 円周率（読み取り専用）. public const float PI = 3.1415927 Field Value float Rad2Deg ラジアンから度に変換する定数（読み取り専用）. public const float Rad2Deg = 57.29578 Field Value float Properties Epsilon ごくわずかな浮動小数点の値（読み取り専用）. public static float Epsilon { get; } Property Value float Methods Abs(in int) /value/の絶対値を返します. public static int Abs(in int value) Parameters value int 任意の整数値. Returns int 求めた絶対値. Abs(in float) /f/の絶対値を返します. public static float Abs(in float f) Parameters f float 任意の浮動小数点値. Returns float 求めた絶対値. Approximately(in float, in float) 2つの浮動小数点値を比較し、近似している場合は true を返します. public static bool Approximately(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns bool 近似している場合は true. Ceil(in float) 切り上げて整数値を返します. ex.)2.3f -> 3.0f . public static float Ceil(in float f) Parameters f float 任意の浮動小数点値. Returns float 切り上げた値. CeilToInt(in float) 切り上げて整数値を返します. ex.)2.3f -> 3 . public static int CeilToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 切り上げた値. Clamp(in int, in int, in int) valueを最小値と最大値の間に制限します. ex.)Clamp(2, -1, 1) -> 1 . public static int Clamp(in int value, in int min, in int max) Parameters value int 制限する値. min int 最小値. max int 最大値. Returns int 制限された値. Clamp(in float, in float, in float) valueを最小値と最大値の間に制限します. ex.)Clamp(2.3f, 0.2f, 1.2f) -> 1.2f . public static float Clamp(in float value, in float min, in float max) Parameters value float 制限する値. min float 最小値. max float 最大値. Returns float 制限された値. Clamp01(in float) valueを0.0fから1.0fの間に制限します. ex.)Clamp01(2.3f) -> 1.0f . public static float Clamp01(in float value) Parameters value float 制限する値. Returns float 制限された値. Cos(in float) コサイン（余弦）を返します. public static float Cos(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は-1から+1の間. Floor(in float) 切り捨てて整数値を返します. ex.)2.3f -> 2.0f . public static float Floor(in float f) Parameters f float 任意の浮動小数点値. Returns float 切り捨てた値. FloorToInt(in float) 切り捨てて整数値を返します. ex.)2.3f -> 2 . public static int FloorToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 切り捨てた値. Lerp(in float, in float, in float) aとbの間を線形補間します. ex.)Lerp(2.5f, 3.5f, 0.5f) -> 3.0f . public static float Lerp(in float a, in float b, in float t) Parameters a float 開始値. b float 終了値. t float 補間値. Returns float 補間された値. LerpUnClamped(in float, in float, in float) aとbの間を線形補間します. ex.)LerpUnClamped(2.5f, 3.5f, 0.5f) -> 3.0f . public static float LerpUnClamped(in float a, in float b, in float t) Parameters a float 開始値. b float 終了値. t float 補間値. Returns float 補間された値. Max(in int, in int) 2つ以上の値から最大値を返します. public static int Max(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最大値. Max(in float, in float) 2つ以上の値から最大値を返します. public static float Max(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最大値. Min(in int, in int) 2つ以上の値から最小値を返します. public static int Min(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最小値. Min(in float, in float) 2つ以上の値から最小値を返します. public static float Min(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最小値. Pow(in float, in float) fをp乗した値を返します. public static float Pow(in float f, in float p) Parameters f float 任意の浮動小数点値. p float fを掛ける回数. Returns float 戻り値は0以上の値. Round(in float) 四捨五入して整数値を返します. ex.)2.3f -> 2.0f, 2.5f -> 3.0f . public static float Round(in float f) Parameters f float 任意の浮動小数点値. Returns float 四捨五入した値. RoundToInt(in float) 四捨五入して整数値を返します. ex.)2.3f -> 2, 2.5f -> 3 . public static int RoundToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 四捨五入した値. Sin(in float) サイン（正弦）を返します. public static float Sin(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は-1から+1の間. Sqrt(in float) fの平方根を返します. public static float Sqrt(in float f) Parameters f float 非負の浮動小数点値. Returns float 戻り値は0以上の値. Tan(in float) タンジェント（正接）を返します. public static float Tan(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は無限大から+無限大の間."
  },
  "api/MinimalUtility.MinimalDisposable-1.html": {
    "href": "api/MinimalUtility.MinimalDisposable-1.html",
    "title": "Struct MinimalDisposable<T1> | |",
    "keywords": "Struct MinimalDisposable<T1> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct MinimalDisposable<T1> : IDisposable Type Parameters T1 破棄時に呼び出す処理の引数の型. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/MinimalUtility.MinimalDisposable-2.html": {
    "href": "api/MinimalUtility.MinimalDisposable-2.html",
    "title": "Struct MinimalDisposable<T1, T2> | |",
    "keywords": "Struct MinimalDisposable<T1, T2> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct MinimalDisposable<T1, T2> : IDisposable Type Parameters T1 破棄時に呼び出す処理の第一引数の型. T2 破棄時に呼び出す処理の第二引数の型. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/MinimalUtility.MinimalDisposable-3.html": {
    "href": "api/MinimalUtility.MinimalDisposable-3.html",
    "title": "Struct MinimalDisposable<T1, T2, T3> | |",
    "keywords": "Struct MinimalDisposable<T1, T2, T3> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct MinimalDisposable<T1, T2, T3> : IDisposable Type Parameters T1 破棄時に呼び出す処理の第一引数の型. T2 破棄時に呼び出す処理の第二引数の型. T3 破棄時に呼び出す処理の第三引数の型. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/MinimalUtility.MinimalDisposable.html": {
    "href": "api/MinimalUtility.MinimalDisposable.html",
    "title": "Struct MinimalDisposable | |",
    "keywords": "Struct MinimalDisposable Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct MinimalDisposable : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Methods Create(Action) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static MinimalDisposable Create(Action onDispose) Parameters onDispose Action 破棄時に呼び出す処理. Returns MinimalDisposable usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Create<T1>(T1, Action<T1>) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static MinimalDisposable<T1> Create<T1>(T1 state1, Action<T1> onDispose) Parameters state1 T1 第一引数. onDispose Action<T1> 破棄時に呼び出す処理. Returns MinimalDisposable<T1> usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Type Parameters T1 破棄時に呼び出す処理の引数の型. Create<T1, T2>(T1, T2, Action<T1, T2>) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static MinimalDisposable<T1, T2> Create<T1, T2>(T1 state1, T2 state2, Action<T1, T2> onDispose) Parameters state1 T1 第一引数. state2 T2 第二引数. onDispose Action<T1, T2> 破棄時に呼び出す処理. Returns MinimalDisposable<T1, T2> usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Type Parameters T1 破棄時に呼び出す処理の第一引数の型. T2 破棄時に呼び出す処理の第二引数の型. Create<T1, T2, T3>(T1, T2, T3, Action<T1, T2, T3>) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static MinimalDisposable<T1, T2, T3> Create<T1, T2, T3>(T1 state1, T2 state2, T3 state3, Action<T1, T2, T3> onDispose) Parameters state1 T1 第一引数. state2 T2 第二引数. state3 T3 第三引数. onDispose Action<T1, T2, T3> 破棄時に呼び出す処理. Returns MinimalDisposable<T1, T2, T3> usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Type Parameters T1 破棄時に呼び出す処理の第一引数の型. T2 破棄時に呼び出す処理の第二引数の型. T3 破棄時に呼び出す処理の第三引数の型."
  },
  "api/MinimalUtility.MinimalSelectableGraphic.html": {
    "href": "api/MinimalUtility.MinimalSelectableGraphic.html",
    "title": "Class MinimalSelectableGraphic | |",
    "keywords": "Class MinimalSelectableGraphic Namespace MinimalUtility UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる public sealed class MinimalSelectableGraphic : EmptyGraphic Inheritance object EmptyGraphic MinimalSelectableGraphic Inherited Members EmptyGraphic.SetMaterialDirty() EmptyGraphic.SetVerticesDirty() Methods CrossFadeColor(Color, float, bool, bool) public override void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) Parameters targetColor Color duration float ignoreTimeScale bool useAlpha bool Start() protected override void Start()"
  },
  "api/MinimalUtility.MultiLibraries.DebugProfiler.MemoryUnit.html": {
    "href": "api/MinimalUtility.MultiLibraries.DebugProfiler.MemoryUnit.html",
    "title": "Enum DebugProfiler.MemoryUnit | |",
    "keywords": "Enum DebugProfiler.MemoryUnit Namespace MinimalUtility.MultiLibraries 総メモリ使用量表示の単位指定列挙体. public enum DebugProfiler.MemoryUnit Fields B = 0 GB = 3 KB = 1 MB = 2"
  },
  "api/MinimalUtility.MultiLibraries.DebugProfiler.html": {
    "href": "api/MinimalUtility.MultiLibraries.DebugProfiler.html",
    "title": "Class DebugProfiler | |",
    "keywords": "Class DebugProfiler Namespace MinimalUtility.MultiLibraries FPSなどのプロファイル情報を画面に表示するためのクラス. Time.realtimeSinceStartup の公式リファレンスサンプルコードを参照 public sealed class DebugProfiler Inheritance object DebugProfiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DebugProfiler(MemoryUnit) Initializes a new instance of the DebugProfiler class. public DebugProfiler(DebugProfiler.MemoryUnit memoryUnit) Parameters memoryUnit DebugProfiler.MemoryUnit 総メモリ使用量表示の単位. Properties FrameTiming フレームタイミング情報. public FrameTiming FrameTiming { get; } Property Value FrameTiming IsGUIVisible GUI表示の可視状態. public bool IsGUIVisible { get; set; } Property Value bool Methods StartAsync(CancellationToken) プロファイル情報の表示を開始する. public UniTask StartAsync(CancellationToken cancellation) Parameters cancellation CancellationToken キャンセルトークン. Returns UniTask UniTask."
  },
  "api/MinimalUtility.MultiLibraries.html": {
    "href": "api/MinimalUtility.MultiLibraries.html",
    "title": "Namespace MinimalUtility.MultiLibraries | |",
    "keywords": "Namespace MinimalUtility.MultiLibraries Classes DebugProfiler FPSなどのプロファイル情報を画面に表示するためのクラス. Time.realtimeSinceStartup の公式リファレンスサンプルコードを参照 Enums DebugProfiler.MemoryUnit 総メモリ使用量表示の単位指定列挙体."
  },
  "api/MinimalUtility.R3.ObservableExtensions.html": {
    "href": "api/MinimalUtility.R3.ObservableExtensions.html",
    "title": "Class ObservableExtensions | |",
    "keywords": "Class ObservableExtensions Namespace MinimalUtility.R3 ReactiveProperty<T>の拡張メソッド. public static class ObservableExtensions Inheritance object ObservableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug<T>(Observable<T>, string) Observable上で起きたすべてのイベントをログに出力する. public static Observable<T> Debug<T>(this Observable<T> source, string label = null) Parameters source Observable<T> 任意のObservable. label string ログに出力するラベル. Returns Observable<T> ログ出力を行うObservable. Type Parameters T Observableの型. Debug<T, TState>(Observable<T>, Func<T, TState>) Observable上で起きたすべてのイベントをログに出力する. public static Observable<T> Debug<T, TState>(this Observable<T> source, Func<T, TState> onNext) Parameters source Observable<T> 任意のObservable. onNext Func<T, TState> ログに出力したい値を取得する処理. Returns Observable<T> ログ出力を行うObservable. Type Parameters T Observableの型. TState ログに出力したい値の型. SubscribeLockAwait<T, TGate>(Observable<T>, TGate, Func<T, CancellationToken, ValueTask>) 連打禁止・同時押し禁止のための排他的なSubscribeAwaitを提供します. public static IDisposable SubscribeLockAwait<T, TGate>(this Observable<T> source, TGate gate, Func<T, CancellationToken, ValueTask> onNextAsync) where TGate : ReactiveProperty<bool> Parameters source Observable<T> 任意のObservable. gate TGate 排他制御用のReactiveProperty<T>. onNextAsync Func<T, CancellationToken, ValueTask> 非同期処理. Returns IDisposable 排他的な購読. Type Parameters T Observableの型. TGate 排他制御用のReactiveProperty<T>の型. SubscribeLock<T, TGate>(Observable<T>, TGate, Action<T>) 連打禁止・同時押し禁止のための排他的なSubscribeを提供します. public static IDisposable SubscribeLock<T, TGate>(this Observable<T> source, TGate gate, Action<T> onNext) where TGate : ReactiveProperty<bool> Parameters source Observable<T> 任意のObservable. gate TGate 排他制御用のReactiveProperty<T>. onNext Action<T> 非同期処理. Returns IDisposable 排他的な購読. Type Parameters T Observableの型. TGate 排他制御用のReactiveProperty<T>の型. WaitValueChangedAsync<T>(ReadOnlyReactiveProperty<T>, Func<T, bool>, in CancellationToken) 指定したReactiveProperty<T>の値が変更されるまで待機します. public static Task WaitValueChangedAsync<T>(this ReadOnlyReactiveProperty<T> source, Func<T, bool> predicate, in CancellationToken cancellationToken = default) Parameters source ReadOnlyReactiveProperty<T> 監視対象のReactiveProperty<T>. predicate Func<T, bool> 条件を満たすかどうかを判定する処理. cancellationToken CancellationToken キャンセルトークン. Returns Task 監視対象のReactiveProperty<T>の値が変更されたことを示すTask. Type Parameters T 監視対象のReactiveProperty<T>の型. WaitValueChangedAsync<T>(ReadOnlyReactiveProperty<T>, in CancellationToken) 指定したReactiveProperty<T>の値が変更されるまで待機します. public static Task WaitValueChangedAsync<T>(this ReadOnlyReactiveProperty<T> source, in CancellationToken cancellationToken = default) Parameters source ReadOnlyReactiveProperty<T> 監視対象のReactiveProperty<T>. cancellationToken CancellationToken キャンセルトークン. Returns Task 監視対象のReactiveProperty<T>の値が変更されたことを示すTask. Type Parameters T 監視対象のReactiveProperty<T>の型."
  },
  "api/MinimalUtility.R3.html": {
    "href": "api/MinimalUtility.R3.html",
    "title": "Namespace MinimalUtility.R3 | |",
    "keywords": "Namespace MinimalUtility.R3 Classes ObservableExtensions ReactiveProperty<T>の拡張メソッド."
  },
  "api/MinimalUtility.RectTransformExtensions.html": {
    "href": "api/MinimalUtility.RectTransformExtensions.html",
    "title": "Class RectTransformExtensions | |",
    "keywords": "Class RectTransformExtensions Namespace MinimalUtility RectTransformの拡張メソッド. public static class RectTransformExtensions Inheritance object RectTransformExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSizeDelta(RectTransform) RectTransform.sizeDeltaよりも安全なサイズ取得. public static Vector2 GetSizeDelta(this RectTransform target) Parameters target RectTransform 対象のRectTransform. Returns Vector2 対象のサイズ. SetFullStretch(RectTransform, in float, in float, in float, in float) RectTransformを全面的に伸ばす(stretch * stretchにする). public static void SetFullStretch(this RectTransform target, in float left = 0, in float right = 0, in float top = 0, in float bottom = 0) Parameters target RectTransform 対象のRectTransform. left float 左端のオフセット. right float 右端のオフセット. top float 上端のオフセット. bottom float 下端のオフセット. SetSafeHeight(RectTransform, in float) RectTransform.sizeDeltaよりも安全な縦幅設定. public static void SetSafeHeight(this RectTransform target, in float height) Parameters target RectTransform 対象のRectTransform. height float 縦の長さ. SetSafeSize(RectTransform, in float, in float) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, in float width, in float height) Parameters target RectTransform 対象のRectTransform. width float 横の長さ. height float 縦の長さ. SetSafeSize(RectTransform, Vector2) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, Vector2 size) Parameters target RectTransform 対象のRectTransform. size Vector2 任意の縦横サイズ. SetSafeWidth(RectTransform, in float) RectTransform.sizeDeltaよりも安全な横幅設定. public static void SetSafeWidth(this RectTransform target, in float width) Parameters target RectTransform 対象のRectTransform. width float 横の長さ."
  },
  "api/MinimalUtility.SafeAreaAdjuster.html": {
    "href": "api/MinimalUtility.SafeAreaAdjuster.html",
    "title": "Class SafeAreaAdjuster | |",
    "keywords": "Class SafeAreaAdjuster Namespace MinimalUtility セーフエリア調整スクリプト. public sealed class SafeAreaAdjuster : MonoBehaviour Inheritance object SafeAreaAdjuster"
  },
  "api/MinimalUtility.SimpleGauge.html": {
    "href": "api/MinimalUtility.SimpleGauge.html",
    "title": "Class SimpleGauge | |",
    "keywords": "Class SimpleGauge Namespace MinimalUtility RectMask2Dを継承利用したシンプルで綺麗なゲージ表示. public class SimpleGauge : RectMask2D Inheritance object SimpleGauge Properties Graphic ゲージの表示に使用するMaskableGraphic. public MaskableGraphic Graphic { get; } Property Value MaskableGraphic Value ゲージの値(0.0 ～ 1.0). public float Value { get; set; } Property Value float Methods OnEnable() protected override void OnEnable()"
  },
  "api/MinimalUtility.String.StringUtils.html": {
    "href": "api/MinimalUtility.String.StringUtils.html",
    "title": "Class StringUtils | |",
    "keywords": "Class StringUtils Namespace MinimalUtility.String public static class StringUtils Inheritance object StringUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(IFormatProvider?, ref DefaultInterpolatedStringHandler) Creates a new string by using the specified provider to control the formatting of the specified interpolated string. public static string Create(IFormatProvider? provider, ref DefaultInterpolatedStringHandler handler) Parameters provider IFormatProvider An object that supplies culture-specific formatting information. handler DefaultInterpolatedStringHandler The interpolated string. Returns string The string that results for formatting the interpolated string using the specified format provider. Create(IFormatProvider?, Span<char>, ref DefaultInterpolatedStringHandler) Creates a new string by using the specified provider to control the formatting of the specified interpolated string. public static string Create(IFormatProvider? provider, Span<char> initialBuffer, ref DefaultInterpolatedStringHandler handler) Parameters provider IFormatProvider An object that supplies culture-specific formatting information. initialBuffer Span<char> The initial buffer that may be used as temporary space as part of the formatting operation. The contents of this buffer may be overwritten. handler DefaultInterpolatedStringHandler The interpolated string. Returns string The string that results for formatting the interpolated string using the specified format provider."
  },
  "api/MinimalUtility.String.html": {
    "href": "api/MinimalUtility.String.html",
    "title": "Namespace MinimalUtility.String | |",
    "keywords": "Namespace MinimalUtility.String Classes StringUtils"
  },
  "api/MinimalUtility.Tasks.Progress.html": {
    "href": "api/MinimalUtility.Tasks.Progress.html",
    "title": "Class Progress | |",
    "keywords": "Class Progress Namespace MinimalUtility.Tasks 簡易IProgress<T>ファクトリ. public static class Progress Inheritance object Progress Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CreateOnlyValueChanged<T>(Action<T>) 進捗状況の値が変更された時だけ通知するProgressを生成します. public static IProgress<T> CreateOnlyValueChanged<T>(Action<T> handler) Parameters handler Action<T> 進捗状況が変更された時に呼び出されるコールバック. Returns IProgress<T> 進捗状況の値が変更された時だけコールバックを呼び出すProgress. Type Parameters T 進捗状況の値の型. CreateOnlyValueChanged<T, TState>(TState, Action<T, TState>, IEqualityComparer<T>) 進捗状況の値が変更された時だけ通知するProgressを生成します. Cysharp.Threading.Tasks.Progress.CreateOnlyValueChanged<T>(Action<T>, IEqualityComparer<T>)の引数を設定できる版. public static IProgress<T> CreateOnlyValueChanged<T, TState>(TState state, Action<T, TState> handler, IEqualityComparer<T> comparer = null) Parameters state TState 引数として渡したい値. handler Action<T, TState> 進捗状況が変更された時に呼び出されるコールバック. comparer IEqualityComparer<T> 進捗状況の値を比較するためのEqualityComparer<T>. Returns IProgress<T> 進捗状況の値が変更された時だけコールバックを呼び出すProgress. Type Parameters T 進捗状況の値の型. TState 渡したい引数の型. Create<T>(Action<T>) 進捗状況の値を通知するProgressを生成します. public static IProgress<T> Create<T>(Action<T> handler) Parameters handler Action<T> 進捗状況が変更された時に呼び出されるコールバック. Returns IProgress<T> 進捗状況の値を通知するProgress. Type Parameters T 進捗状況の値の型. Create<T, TState>(TState, Action<T, TState>) 進捗状況の値を通知するProgressを生成します. Cysharp.Threading.Tasks.Progress.Create<T>(Action<T>)の引数を設定できる版. public static IProgress<T> Create<T, TState>(TState state, Action<T, TState> handler) Parameters state TState 引数として渡したい値. handler Action<T, TState> 進捗状況が変更された時に呼び出されるコールバック. Returns IProgress<T> 進捗状況の値を通知するProgress. Type Parameters T 進捗状況の値の型. TState 渡したい引数の型."
  },
  "api/MinimalUtility.Tasks.UniTaskExtensions.html": {
    "href": "api/MinimalUtility.Tasks.UniTaskExtensions.html",
    "title": "Class UniTaskExtensions | |",
    "keywords": "Class UniTaskExtensions Namespace MinimalUtility.Tasks UniTaskの拡張メソッド. public static class UniTaskExtensions Inheritance object UniTaskExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WaitForEndFrameSafety(MonoBehaviour, bool) UniTask.WaitForEndOfFrame(MonoBehaviour)は内部にコルーチンを含む. そのためコルーチンの駆動元であるMonoBehaviourが非表示になるとエラーが発生する. それを回避したうえで安全にフレーム終わりまで待機する. public static UniTask WaitForEndFrameSafety(this MonoBehaviour monoBehaviour, bool cancelImmediately = false) Parameters monoBehaviour MonoBehaviour コルーチン駆動の基盤となるMonoBehaviour. cancelImmediately bool 即座にキャンセルするかどうか. Returns UniTask フレーム終わりまで待機するUniTask. WaitForEndFrameSafety(MonoBehaviour, CancellationToken, bool) UniTask.WaitForEndOfFrame(MonoBehaviour)は内部にコルーチンを含む. そのためコルーチンの駆動元であるMonoBehaviourが非表示になるとエラーが発生する. それを回避したうえで安全にフレーム終わりまで待機する. public static UniTask WaitForEndFrameSafety(this MonoBehaviour monoBehaviour, CancellationToken cancellationToken, bool cancelImmediately = false) Parameters monoBehaviour MonoBehaviour コルーチン駆動の基盤となるMonoBehaviour. cancellationToken CancellationToken キャンセルトークン. cancelImmediately bool 即座にキャンセルするかどうか. Returns UniTask フレーム終わりまで待機するUniTask."
  },
  "api/MinimalUtility.Tasks.html": {
    "href": "api/MinimalUtility.Tasks.html",
    "title": "Namespace MinimalUtility.Tasks | |",
    "keywords": "Namespace MinimalUtility.Tasks Classes Progress 簡易IProgress<T>ファクトリ. UniTaskExtensions UniTaskの拡張メソッド."
  },
  "api/MinimalUtility.VContainer.LifetimeScopeBase.html": {
    "href": "api/MinimalUtility.VContainer.LifetimeScopeBase.html",
    "title": "Class LifetimeScopeBase | |",
    "keywords": "Class LifetimeScopeBase Namespace MinimalUtility.VContainer LifetimeScopeの共通基底クラス. public class LifetimeScopeBase : LifetimeScope Inheritance object LifetimeScopeBase Methods Configure(IContainerBuilder) protected override void Configure(IContainerBuilder builder) Parameters builder IContainerBuilder"
  },
  "api/MinimalUtility.VContainer.html": {
    "href": "api/MinimalUtility.VContainer.html",
    "title": "Namespace MinimalUtility.VContainer | |",
    "keywords": "Namespace MinimalUtility.VContainer Classes LifetimeScopeBase LifetimeScopeの共通基底クラス."
  },
  "api/MinimalUtility.html": {
    "href": "api/MinimalUtility.html",
    "title": "Namespace MinimalUtility | |",
    "keywords": "Namespace MinimalUtility Classes ButtonAttribute 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. CommonObjectPool<T> 汎用オブジェクトプール実装. ComponentExtensions Componentの拡張メソッド. DisposableExtensions IDisposableの拡張メソッド. EmptyGraphic 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき EqualityComparer EqualityComparer<T>の拡張クラス. GenerateStringConverterAttribute Enumの文字列変換クラスを自動生成するための属性. 以下のようなコードが自動生成されます. using System; namespace MinimalUtility.MultiLibraries { public partial class MemoryUnitStringConverter { private readonly string[] names = new string[] { \"B\", \"KB\", \"MB\", \"GB\", }; public ReadOnlySpan<string> MemberNames => names; public ReadOnlySpan<DebugProfiler.MemoryUnit> MemberValues => new DebugProfiler.MemoryUnit[] { DebugProfiler.MemoryUnit.B, DebugProfiler.MemoryUnit.KB, DebugProfiler.MemoryUnit.MB, DebugProfiler.MemoryUnit.GB, }; public ref readonly string Convert(in DebugProfiler.MemoryUnit value) { switch ((int)value) { case 0: return ref names[0]; case 1: return ref names[1]; case 2: return ref names[2]; case 3: return ref names[3]; default: return ref string.Empty; } } public DebugProfiler.MemoryUnit ReverseConvert(in string name) { switch (Array.IndexOf(names, name)) { case 0: return DebugProfiler.MemoryUnit.B; case 1: return DebugProfiler.MemoryUnit.KB; case 2: return DebugProfiler.MemoryUnit.MB; case 3: return DebugProfiler.MemoryUnit.GB; default: throw new InvalidCastException(name); } } } } Math 最小限の数学関数. MinimalSelectableGraphic UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる RectTransformExtensions RectTransformの拡張メソッド. SafeAreaAdjuster セーフエリア調整スクリプト. SimpleGauge RectMask2Dを継承利用したシンプルで綺麗なゲージ表示. Structs CommonObjectPool<T>.PoolSizeSetting プールの初期容量と最大サイズを指定する構造体. MinimalDisposable usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. MinimalDisposable<T1> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. MinimalDisposable<T1, T2> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. MinimalDisposable<T1, T2, T3> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. Interfaces IObjectPool<T> ObjectPoolを提供するインターフェイス."
  },
  "api/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.html",
    "title": "Class CallerArgumentExpressionAttribute | |",
    "keywords": "Class CallerArgumentExpressionAttribute Namespace System.Runtime.CompilerServices [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)] public sealed class CallerArgumentExpressionAttribute : Attribute Inheritance object Attribute CallerArgumentExpressionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CallerArgumentExpressionAttribute(string) public CallerArgumentExpressionAttribute(string parameterName) Parameters parameterName string Properties ParameterName public string ParameterName { get; } Property Value string"
  },
  "api/System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.html": {
    "href": "api/System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.html",
    "title": "Struct DefaultInterpolatedStringHandler | |",
    "keywords": "Struct DefaultInterpolatedStringHandler Namespace System.Runtime.CompilerServices Provides a handler used by the language compiler to process interpolated strings into string instances. public ref struct DefaultInterpolatedStringHandler Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DefaultInterpolatedStringHandler(int, int) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. DefaultInterpolatedStringHandler(int, int, IFormatProvider?) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider? provider) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. provider IFormatProvider An object that supplies culture-specific formatting information. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. DefaultInterpolatedStringHandler(int, int, IFormatProvider?, Span<char>) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider? provider, Span<char> initialBuffer) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. provider IFormatProvider An object that supplies culture-specific formatting information. initialBuffer Span<char> A buffer temporarily transferred to the handler for use as part of its formatting. Contents may be overwritten. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. Methods AppendFormatted(bool) public void AppendFormatted(bool value) Parameters value bool AppendFormatted(bool, int) public void AppendFormatted(bool value, int alignment) Parameters value bool alignment int AppendFormatted(bool, int, string?) public void AppendFormatted(bool value, int alignment, string? format) Parameters value bool alignment int format string AppendFormatted(bool, string?) public void AppendFormatted(bool value, string? format) Parameters value bool format string AppendFormatted(byte) public void AppendFormatted(byte value) Parameters value byte AppendFormatted(byte, int) public void AppendFormatted(byte value, int alignment) Parameters value byte alignment int AppendFormatted(byte, int, string?) public void AppendFormatted(byte value, int alignment, string? format) Parameters value byte alignment int format string AppendFormatted(byte, string?) public void AppendFormatted(byte value, string? format) Parameters value byte format string AppendFormatted(DateTime) public void AppendFormatted(DateTime value) Parameters value DateTime AppendFormatted(DateTime, int) public void AppendFormatted(DateTime value, int alignment) Parameters value DateTime alignment int AppendFormatted(DateTime, int, string?) public void AppendFormatted(DateTime value, int alignment, string? format) Parameters value DateTime alignment int format string AppendFormatted(DateTime, string?) public void AppendFormatted(DateTime value, string? format) Parameters value DateTime format string AppendFormatted(DateTimeOffset) public void AppendFormatted(DateTimeOffset value) Parameters value DateTimeOffset AppendFormatted(DateTimeOffset, int) public void AppendFormatted(DateTimeOffset value, int alignment) Parameters value DateTimeOffset alignment int AppendFormatted(DateTimeOffset, int, string?) public void AppendFormatted(DateTimeOffset value, int alignment, string? format) Parameters value DateTimeOffset alignment int format string AppendFormatted(DateTimeOffset, string?) public void AppendFormatted(DateTimeOffset value, string? format) Parameters value DateTimeOffset format string AppendFormatted(decimal) public void AppendFormatted(decimal value) Parameters value decimal AppendFormatted(decimal, int) public void AppendFormatted(decimal value, int alignment) Parameters value decimal alignment int AppendFormatted(decimal, int, string?) public void AppendFormatted(decimal value, int alignment, string? format) Parameters value decimal alignment int format string AppendFormatted(decimal, string?) public void AppendFormatted(decimal value, string? format) Parameters value decimal format string AppendFormatted(double) public void AppendFormatted(double value) Parameters value double AppendFormatted(double, int) public void AppendFormatted(double value, int alignment) Parameters value double alignment int AppendFormatted(double, int, string?) public void AppendFormatted(double value, int alignment, string? format) Parameters value double alignment int format string AppendFormatted(double, string?) public void AppendFormatted(double value, string? format) Parameters value double format string AppendFormatted(Guid) public void AppendFormatted(Guid value) Parameters value Guid AppendFormatted(Guid, int) public void AppendFormatted(Guid value, int alignment) Parameters value Guid alignment int AppendFormatted(Guid, int, string?) public void AppendFormatted(Guid value, int alignment, string? format) Parameters value Guid alignment int format string AppendFormatted(Guid, string?) public void AppendFormatted(Guid value, string? format) Parameters value Guid format string AppendFormatted(short) public void AppendFormatted(short value) Parameters value short AppendFormatted(short, int) public void AppendFormatted(short value, int alignment) Parameters value short alignment int AppendFormatted(short, int, string?) public void AppendFormatted(short value, int alignment, string? format) Parameters value short alignment int format string AppendFormatted(short, string?) public void AppendFormatted(short value, string? format) Parameters value short format string AppendFormatted(int) public void AppendFormatted(int value) Parameters value int AppendFormatted(int, int) public void AppendFormatted(int value, int alignment) Parameters value int alignment int AppendFormatted(int, int, string?) public void AppendFormatted(int value, int alignment, string? format) Parameters value int alignment int format string AppendFormatted(int, string?) public void AppendFormatted(int value, string? format) Parameters value int format string AppendFormatted(long) public void AppendFormatted(long value) Parameters value long AppendFormatted(long, int) public void AppendFormatted(long value, int alignment) Parameters value long alignment int AppendFormatted(long, int, string?) public void AppendFormatted(long value, int alignment, string? format) Parameters value long alignment int format string AppendFormatted(long, string?) public void AppendFormatted(long value, string? format) Parameters value long format string AppendFormatted(object?, int, string?) Writes the specified value to the handler. public void AppendFormatted(object? value, int alignment = 0, string? format = null) Parameters value object The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(ReadOnlySpan<char>) Writes the specified character span to the handler. public void AppendFormatted(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The span to write. AppendFormatted(ReadOnlySpan<char>, int, string?) Writes the specified string of chars to the handler. public void AppendFormatted(ReadOnlySpan<char> value, int alignment = 0, string? format = null) Parameters value ReadOnlySpan<char> The span to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(sbyte) public void AppendFormatted(sbyte value) Parameters value sbyte AppendFormatted(sbyte, int) public void AppendFormatted(sbyte value, int alignment) Parameters value sbyte alignment int AppendFormatted(sbyte, int, string?) public void AppendFormatted(sbyte value, int alignment, string? format) Parameters value sbyte alignment int format string AppendFormatted(sbyte, string?) public void AppendFormatted(sbyte value, string? format) Parameters value sbyte format string AppendFormatted(float) public void AppendFormatted(float value) Parameters value float AppendFormatted(float, int) public void AppendFormatted(float value, int alignment) Parameters value float alignment int AppendFormatted(float, int, string?) public void AppendFormatted(float value, int alignment, string? format) Parameters value float alignment int format string AppendFormatted(float, string?) public void AppendFormatted(float value, string? format) Parameters value float format string AppendFormatted(string?) Writes the specified value to the handler. public void AppendFormatted(string? value) Parameters value string The value to write. AppendFormatted(string?, int, string?) Writes the specified value to the handler. public void AppendFormatted(string? value, int alignment = 0, string? format = null) Parameters value string The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(TimeSpan) public void AppendFormatted(TimeSpan value) Parameters value TimeSpan AppendFormatted(TimeSpan, int) public void AppendFormatted(TimeSpan value, int alignment) Parameters value TimeSpan alignment int AppendFormatted(TimeSpan, int, string?) public void AppendFormatted(TimeSpan value, int alignment, string? format) Parameters value TimeSpan alignment int format string AppendFormatted(TimeSpan, string?) public void AppendFormatted(TimeSpan value, string? format) Parameters value TimeSpan format string AppendFormatted(ushort) public void AppendFormatted(ushort value) Parameters value ushort AppendFormatted(ushort, int) public void AppendFormatted(ushort value, int alignment) Parameters value ushort alignment int AppendFormatted(ushort, int, string?) public void AppendFormatted(ushort value, int alignment, string? format) Parameters value ushort alignment int format string AppendFormatted(ushort, string?) public void AppendFormatted(ushort value, string? format) Parameters value ushort format string AppendFormatted(uint) public void AppendFormatted(uint value) Parameters value uint AppendFormatted(uint, int) public void AppendFormatted(uint value, int alignment) Parameters value uint alignment int AppendFormatted(uint, int, string?) public void AppendFormatted(uint value, int alignment, string? format) Parameters value uint alignment int format string AppendFormatted(uint, string?) public void AppendFormatted(uint value, string? format) Parameters value uint format string AppendFormatted(ulong) public void AppendFormatted(ulong value) Parameters value ulong AppendFormatted(ulong, int) public void AppendFormatted(ulong value, int alignment) Parameters value ulong alignment int AppendFormatted(ulong, int, string?) public void AppendFormatted(ulong value, int alignment, string? format) Parameters value ulong alignment int format string AppendFormatted(ulong, string?) public void AppendFormatted(ulong value, string? format) Parameters value ulong format string AppendFormatted(Bounds) public void AppendFormatted(UnityEngine.Bounds value) Parameters value Bounds AppendFormatted(Bounds, int) public void AppendFormatted(UnityEngine.Bounds value, int alignment) Parameters value Bounds alignment int AppendFormatted(Bounds, int, string?) public void AppendFormatted(UnityEngine.Bounds value, int alignment, string? format) Parameters value Bounds alignment int format string AppendFormatted(Bounds, string?) public void AppendFormatted(UnityEngine.Bounds value, string? format) Parameters value Bounds format string AppendFormatted(BoundsInt) public void AppendFormatted(UnityEngine.BoundsInt value) Parameters value BoundsInt AppendFormatted(BoundsInt, int) public void AppendFormatted(UnityEngine.BoundsInt value, int alignment) Parameters value BoundsInt alignment int AppendFormatted(BoundsInt, int, string?) public void AppendFormatted(UnityEngine.BoundsInt value, int alignment, string? format) Parameters value BoundsInt alignment int format string AppendFormatted(BoundsInt, string?) public void AppendFormatted(UnityEngine.BoundsInt value, string? format) Parameters value BoundsInt format string AppendFormatted(Color) public void AppendFormatted(UnityEngine.Color value) Parameters value Color AppendFormatted(Color, int) public void AppendFormatted(UnityEngine.Color value, int alignment) Parameters value Color alignment int AppendFormatted(Color, int, string?) public void AppendFormatted(UnityEngine.Color value, int alignment, string? format) Parameters value Color alignment int format string AppendFormatted(Color, string?) public void AppendFormatted(UnityEngine.Color value, string? format) Parameters value Color format string AppendFormatted(Color32) public void AppendFormatted(UnityEngine.Color32 value) Parameters value Color32 AppendFormatted(Color32, int) public void AppendFormatted(UnityEngine.Color32 value, int alignment) Parameters value Color32 alignment int AppendFormatted(Color32, int, string?) public void AppendFormatted(UnityEngine.Color32 value, int alignment, string? format) Parameters value Color32 alignment int format string AppendFormatted(Color32, string?) public void AppendFormatted(UnityEngine.Color32 value, string? format) Parameters value Color32 format string AppendFormatted(Matrix4x4) public void AppendFormatted(UnityEngine.Matrix4x4 value) Parameters value Matrix4x4 AppendFormatted(Matrix4x4, int) public void AppendFormatted(UnityEngine.Matrix4x4 value, int alignment) Parameters value Matrix4x4 alignment int AppendFormatted(Matrix4x4, int, string?) public void AppendFormatted(UnityEngine.Matrix4x4 value, int alignment, string? format) Parameters value Matrix4x4 alignment int format string AppendFormatted(Matrix4x4, string?) public void AppendFormatted(UnityEngine.Matrix4x4 value, string? format) Parameters value Matrix4x4 format string AppendFormatted(Plane) public void AppendFormatted(UnityEngine.Plane value) Parameters value Plane AppendFormatted(Plane, int) public void AppendFormatted(UnityEngine.Plane value, int alignment) Parameters value Plane alignment int AppendFormatted(Plane, int, string?) public void AppendFormatted(UnityEngine.Plane value, int alignment, string? format) Parameters value Plane alignment int format string AppendFormatted(Plane, string?) public void AppendFormatted(UnityEngine.Plane value, string? format) Parameters value Plane format string AppendFormatted(Quaternion) public void AppendFormatted(UnityEngine.Quaternion value) Parameters value Quaternion AppendFormatted(Quaternion, int) public void AppendFormatted(UnityEngine.Quaternion value, int alignment) Parameters value Quaternion alignment int AppendFormatted(Quaternion, int, string?) public void AppendFormatted(UnityEngine.Quaternion value, int alignment, string? format) Parameters value Quaternion alignment int format string AppendFormatted(Quaternion, string?) public void AppendFormatted(UnityEngine.Quaternion value, string? format) Parameters value Quaternion format string AppendFormatted(Ray) public void AppendFormatted(UnityEngine.Ray value) Parameters value Ray AppendFormatted(Ray, int) public void AppendFormatted(UnityEngine.Ray value, int alignment) Parameters value Ray alignment int AppendFormatted(Ray, int, string?) public void AppendFormatted(UnityEngine.Ray value, int alignment, string? format) Parameters value Ray alignment int format string AppendFormatted(Ray, string?) public void AppendFormatted(UnityEngine.Ray value, string? format) Parameters value Ray format string AppendFormatted(Ray2D) public void AppendFormatted(UnityEngine.Ray2D value) Parameters value Ray2D AppendFormatted(Ray2D, int) public void AppendFormatted(UnityEngine.Ray2D value, int alignment) Parameters value Ray2D alignment int AppendFormatted(Ray2D, int, string?) public void AppendFormatted(UnityEngine.Ray2D value, int alignment, string? format) Parameters value Ray2D alignment int format string AppendFormatted(Ray2D, string?) public void AppendFormatted(UnityEngine.Ray2D value, string? format) Parameters value Ray2D format string AppendFormatted(Rect) public void AppendFormatted(UnityEngine.Rect value) Parameters value Rect AppendFormatted(Rect, int) public void AppendFormatted(UnityEngine.Rect value, int alignment) Parameters value Rect alignment int AppendFormatted(Rect, int, string?) public void AppendFormatted(UnityEngine.Rect value, int alignment, string? format) Parameters value Rect alignment int format string AppendFormatted(Rect, string?) public void AppendFormatted(UnityEngine.Rect value, string? format) Parameters value Rect format string AppendFormatted(RectInt) public void AppendFormatted(UnityEngine.RectInt value) Parameters value RectInt AppendFormatted(RectInt, int) public void AppendFormatted(UnityEngine.RectInt value, int alignment) Parameters value RectInt alignment int AppendFormatted(RectInt, int, string?) public void AppendFormatted(UnityEngine.RectInt value, int alignment, string? format) Parameters value RectInt alignment int format string AppendFormatted(RectInt, string?) public void AppendFormatted(UnityEngine.RectInt value, string? format) Parameters value RectInt format string AppendFormatted(RectOffset) public void AppendFormatted(UnityEngine.RectOffset value) Parameters value RectOffset AppendFormatted(RectOffset, int) public void AppendFormatted(UnityEngine.RectOffset value, int alignment) Parameters value RectOffset alignment int AppendFormatted(RectOffset, int, string?) public void AppendFormatted(UnityEngine.RectOffset value, int alignment, string? format) Parameters value RectOffset alignment int format string AppendFormatted(RectOffset, string?) public void AppendFormatted(UnityEngine.RectOffset value, string? format) Parameters value RectOffset format string AppendFormatted(Vector2) public void AppendFormatted(UnityEngine.Vector2 value) Parameters value Vector2 AppendFormatted(Vector2, int) public void AppendFormatted(UnityEngine.Vector2 value, int alignment) Parameters value Vector2 alignment int AppendFormatted(Vector2, int, string?) public void AppendFormatted(UnityEngine.Vector2 value, int alignment, string? format) Parameters value Vector2 alignment int format string AppendFormatted(Vector2, string?) public void AppendFormatted(UnityEngine.Vector2 value, string? format) Parameters value Vector2 format string AppendFormatted(Vector2Int) public void AppendFormatted(UnityEngine.Vector2Int value) Parameters value Vector2Int AppendFormatted(Vector2Int, int) public void AppendFormatted(UnityEngine.Vector2Int value, int alignment) Parameters value Vector2Int alignment int AppendFormatted(Vector2Int, int, string?) public void AppendFormatted(UnityEngine.Vector2Int value, int alignment, string? format) Parameters value Vector2Int alignment int format string AppendFormatted(Vector2Int, string?) public void AppendFormatted(UnityEngine.Vector2Int value, string? format) Parameters value Vector2Int format string AppendFormatted(Vector3) public void AppendFormatted(UnityEngine.Vector3 value) Parameters value Vector3 AppendFormatted(Vector3, int) public void AppendFormatted(UnityEngine.Vector3 value, int alignment) Parameters value Vector3 alignment int AppendFormatted(Vector3, int, string?) public void AppendFormatted(UnityEngine.Vector3 value, int alignment, string? format) Parameters value Vector3 alignment int format string AppendFormatted(Vector3, string?) public void AppendFormatted(UnityEngine.Vector3 value, string? format) Parameters value Vector3 format string AppendFormatted(Vector3Int) public void AppendFormatted(UnityEngine.Vector3Int value) Parameters value Vector3Int AppendFormatted(Vector3Int, int) public void AppendFormatted(UnityEngine.Vector3Int value, int alignment) Parameters value Vector3Int alignment int AppendFormatted(Vector3Int, int, string?) public void AppendFormatted(UnityEngine.Vector3Int value, int alignment, string? format) Parameters value Vector3Int alignment int format string AppendFormatted(Vector3Int, string?) public void AppendFormatted(UnityEngine.Vector3Int value, string? format) Parameters value Vector3Int format string AppendFormatted(Vector4) public void AppendFormatted(UnityEngine.Vector4 value) Parameters value Vector4 AppendFormatted(Vector4, int) public void AppendFormatted(UnityEngine.Vector4 value, int alignment) Parameters value Vector4 alignment int AppendFormatted(Vector4, int, string?) public void AppendFormatted(UnityEngine.Vector4 value, int alignment, string? format) Parameters value Vector4 alignment int format string AppendFormatted(Vector4, string?) public void AppendFormatted(UnityEngine.Vector4 value, string? format) Parameters value Vector4 format string AppendFormatted<T>(T) Writes the specified value to the handler. public void AppendFormatted<T>(T value) Parameters value T The value to write. Type Parameters T The type of the value to write. AppendFormatted<T>(T, int) Writes the specified value to the handler. public void AppendFormatted<T>(T value, int alignment) Parameters value T The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. Type Parameters T The type of the value to write. AppendFormatted<T>(T, int, string?) Writes the specified value to the handler. public void AppendFormatted<T>(T value, int alignment, string? format) Parameters value T The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. Type Parameters T The type of the value to write. AppendFormatted<T>(T, string?) Writes the specified value to the handler. public void AppendFormatted<T>(T value, string? format) Parameters value T The value to write. format string The format string. Type Parameters T The type of the value to write. AppendLiteral(string) Writes the specified string to the handler. public void AppendLiteral(string value) Parameters value string The string to write. ToString() Gets the built string. public override string ToString() Returns string The built string. ToStringAndClear() Gets the built string and clears the handler. public string ToStringAndClear() Returns string The built string. Remarks This releases any resources used by the handler. The method should be invoked only once and as the last thing performed on the handler. Subsequent use is erroneous, ill-defined, and may destabilize the process, as may using any other copies of the handler after ToStringAndClear is called on any one of them."
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | |",
    "keywords": "Namespace System.Runtime.CompilerServices Classes CallerArgumentExpressionAttribute Structs DefaultInterpolatedStringHandler Provides a handler used by the language compiler to process interpolated strings into string instances."
  },
  "api/VContainer.Unity.CustomContainerBuilderUnityExtensions.html": {
    "href": "api/VContainer.Unity.CustomContainerBuilderUnityExtensions.html",
    "title": "Class CustomContainerBuilderUnityExtensions | |",
    "keywords": "Class CustomContainerBuilderUnityExtensions Namespace VContainer.Unity ContainerBuilderUnityExtensionsにはない、カスタムの拡張メソッド. public static class CustomContainerBuilderUnityExtensions Inheritance object CustomContainerBuilderUnityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterComponent(IContainerBuilder, Component) Register a component to the container. public static RegistrationBuilder RegisterComponent(this IContainerBuilder builder, Component component) Parameters builder IContainerBuilder IContainerBuilder. component Component Component. Returns RegistrationBuilder RegistrationBuilder."
  },
  "api/VContainer.Unity.html": {
    "href": "api/VContainer.Unity.html",
    "title": "Namespace VContainer.Unity | |",
    "keywords": "Namespace VContainer.Unity Classes CustomContainerBuilderUnityExtensions ContainerBuilderUnityExtensionsにはない、カスタムの拡張メソッド."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2024 Masatake Iwasaki Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "MinimalUtility | |",
    "keywords": "MinimalUtility Minimal utility library. 1. Installation Add the package via git from Package Manager. If you are using Unity 2019.1 or later, you can use Package Manager to install a package via git. https://github.com/kochounoyume/MinimalUtility.git?path=Packages/MinimalUtility 2. StyleCopAnalyzers The repository incorporates StyleCopAnalyzers to improve development efficiency. Some rules have been disabled, but naming conventions and other rules basically follow those set out by StyleCopAnalyzers. Note As mentioned earlier, this repository contains StyleCopAnalyzers, but that has no effect on importing them into your Unity environment as a package. StyleCopAnalyzers is merely a code maintenance role in this repository. Therefore, you do not have to follow the naming conventions and other rules of StyleCopAnalyzers when you introduce the MnimalUtility. License MIT License Copyright (c) Tunnel Vision Laboratories, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}