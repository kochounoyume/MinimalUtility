{
  "api/Global.Fruits.html": {
    "href": "api/Global.Fruits.html",
    "title": "Enum Fruits | |",
    "keywords": "Enum Fruits Namespace Global public enum Fruits Fields Apple = 0 Banana = 1 Orange = 2"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Enums Fruits"
  },
  "api/MinimalUtility.ButtonAttribute.html": {
    "href": "api/MinimalUtility.ButtonAttribute.html",
    "title": "Class ButtonAttribute | |",
    "keywords": "Class ButtonAttribute Namespace MinimalUtility 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. [Conditional(\"UNITY_EDITOR\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ButtonAttribute : Attribute Inheritance object Attribute ButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonAttribute(string, params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(string buttonName = \"\", params object[] parameters) Parameters buttonName string ボタンの名前.デフォルト値は対象メソッド名. parameters object[] 引数. Fields ButtonName ボタンの名前. public readonly string ButtonName Field Value string Parameters 引数. public readonly object[] Parameters Field Value object[]"
  },
  "api/MinimalUtility.ComponentExtensions.html": {
    "href": "api/MinimalUtility.ComponentExtensions.html",
    "title": "Class ComponentExtensions | |",
    "keywords": "Class ComponentExtensions Namespace MinimalUtility Componentの拡張メソッド. public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetComponentsInOnlyChildren<T>(Component) 子オブジェクトのTコンポーネントを全て取得する. Component.GetComponentsInChildren<T>()と異なり、孫オブジェクト以降は検索しない. public static ReadOnlyMemory<T> GetComponentsInOnlyChildren<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns ReadOnlyMemory<T> 取得したコンポーネントインスタンスのコレクション. Type Parameters T 取得したいコンポーネントの型. SafeGetComponent<T>(Component) 安全なComponent.GetComponent<T>. public static T SafeGetComponent<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns T 取得したコンポーネントインスタンス.なお取得不可の場合はSystemのnullを返す. Type Parameters T 取得したいコンポーネントの型."
  },
  "api/MinimalUtility.Debugging.DebugViewerBase.html": {
    "href": "api/MinimalUtility.Debugging.DebugViewerBase.html",
    "title": "Class DebugViewerBase | |",
    "keywords": "Class DebugViewerBase Namespace MinimalUtility.Debugging 実機デバッグメニューの実装をするための基底クラス. public abstract class DebugViewerBase Inheritance object DebugViewerBase Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PanelSettings パネル設定. public PanelSettings PanelSettings { get; set; } Property Value PanelSettings ThemeStyleSheet tss. public ThemeStyleSheet ThemeStyleSheet { get; set; } Property Value ThemeStyleSheet Methods Start() エントリーポイント. public virtual VisualElement Start() Returns VisualElement ルート要素."
  },
  "api/MinimalUtility.Debugging.ProfileUtils.MemoryUnit.html": {
    "href": "api/MinimalUtility.Debugging.ProfileUtils.MemoryUnit.html",
    "title": "Enum ProfileUtils.MemoryUnit | |",
    "keywords": "Enum ProfileUtils.MemoryUnit Namespace MinimalUtility.Debugging 総メモリ使用量表示の単位指定列挙体. public enum ProfileUtils.MemoryUnit Fields B = 0 GB = 3 KB = 1 MB = 2"
  },
  "api/MinimalUtility.Debugging.ProfileUtils.html": {
    "href": "api/MinimalUtility.Debugging.ProfileUtils.html",
    "title": "Class ProfileUtils | |",
    "keywords": "Class ProfileUtils Namespace MinimalUtility.Debugging フレームデータを提供する. public static class ProfileUtils Inheritance object ProfileUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLatestFrameTiming() 最新のフレームタイミング情報を取得します. public static FrameTiming GetLatestFrameTiming() Returns FrameTiming 最新のフレームタイミング情報. GetProfileInfoLabel() プロファイル情報ラベルを取得します. public static Label GetProfileInfoLabel() Returns Label プロファイル情報ラベル. GetTotalMemory(MemoryUnit) Unityによって予約されたメモリの合計を単位指定して取得します. public static float GetTotalMemory(ProfileUtils.MemoryUnit unit) Parameters unit ProfileUtils.MemoryUnit メモリ単位. Returns float 指定した単位でのメモリ合計."
  },
  "api/MinimalUtility.Debugging.html": {
    "href": "api/MinimalUtility.Debugging.html",
    "title": "Namespace MinimalUtility.Debugging | |",
    "keywords": "Namespace MinimalUtility.Debugging Classes DebugViewerBase 実機デバッグメニューの実装をするための基底クラス. ProfileUtils フレームデータを提供する. Enums ProfileUtils.MemoryUnit 総メモリ使用量表示の単位指定列挙体."
  },
  "api/MinimalUtility.DisposableExtensions.html": {
    "href": "api/MinimalUtility.DisposableExtensions.html",
    "title": "Class DisposableExtensions | |",
    "keywords": "Class DisposableExtensions Namespace MinimalUtility IDisposableの拡張メソッド. public static class DisposableExtensions Inheritance object DisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTo<T>(T, ref IDisposable) IDisposableを指定したIDisposableコンテナに追加します. public static void AddTo<T>(this T disposable, ref IDisposable disposableContainer) where T : class, IDisposable Parameters disposable T 任意のIDisposable実装クラスの参照. disposableContainer IDisposable 追加先のIDisposableコンテナ. Type Parameters T 追加したIDisposable."
  },
  "api/MinimalUtility.Editor.AnimatorInspector.html": {
    "href": "api/MinimalUtility.Editor.AnimatorInspector.html",
    "title": "Class AnimatorInspector | |",
    "keywords": "Class AnimatorInspector Namespace MinimalUtility.Editor Animator.keepAnimatorStateOnDisableやAnimator.writeDefaultValuesOnDisableも編集できる Animatorカスタムエディタ. public class AnimatorInspector : UnityComponentInspector<Animator> Inheritance object UnityComponentInspector<Animator> AnimatorInspector Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected override string InspectorTypeName { get; } Property Value string Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.DefaultInspector.html": {
    "href": "api/MinimalUtility.Editor.DefaultInspector.html",
    "title": "Class DefaultInspector | |",
    "keywords": "Class DefaultInspector Namespace MinimalUtility.Editor デフォルトのインスペクタービュー. public class DefaultInspector : Editor Inheritance object DefaultInspector Methods CreateInspectorGUI() public override VisualElement CreateInspectorGUI() Returns VisualElement"
  },
  "api/MinimalUtility.Editor.TransformInspector.html": {
    "href": "api/MinimalUtility.Editor.TransformInspector.html",
    "title": "Class TransformInspector | |",
    "keywords": "Class TransformInspector Namespace MinimalUtility.Editor ワールドの座標・回転・大きさも表示するTransformカスタムエディタ. public class TransformInspector : UnityComponentInspector<Transform> Inheritance object UnityComponentInspector<Transform> TransformInspector Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected override string InspectorTypeName { get; } Property Value string Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.UnityComponentInspector-1.html": {
    "href": "api/MinimalUtility.Editor.UnityComponentInspector-1.html",
    "title": "Class UnityComponentInspector<T> | |",
    "keywords": "Class UnityComponentInspector<T> Namespace MinimalUtility.Editor 既存のUnityコンポーネントのカスタムエディタを作成するための基底クラスです. public abstract class UnityComponentInspector<T> : Editor where T : UnityEngine.Component Type Parameters T カスタムエディタを作成するコンポーネントの型. Inheritance object UnityComponentInspector<T> Derived AnimatorInspector TransformInspector Properties InspectorTypeName 対象となるコンポーネントのインスペクター拡張既存クラスの名前. protected abstract string InspectorTypeName { get; } Property Value string Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.html": {
    "href": "api/MinimalUtility.Editor.html",
    "title": "Namespace MinimalUtility.Editor | |",
    "keywords": "Namespace MinimalUtility.Editor Classes AnimatorInspector Animator.keepAnimatorStateOnDisableやAnimator.writeDefaultValuesOnDisableも編集できる Animatorカスタムエディタ. DefaultInspector デフォルトのインスペクタービュー. TransformInspector ワールドの座標・回転・大きさも表示するTransformカスタムエディタ. UnityComponentInspector<T> 既存のUnityコンポーネントのカスタムエディタを作成するための基底クラスです."
  },
  "api/MinimalUtility.EqualityComparer.html": {
    "href": "api/MinimalUtility.EqualityComparer.html",
    "title": "Class EqualityComparer | |",
    "keywords": "Class EqualityComparer Namespace MinimalUtility EqualityComparer<T>の拡張クラス. public static class EqualityComparer Inheritance object EqualityComparer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(Func<T, T, bool>, Func<T, int>) 指定した比較処理を使用してEqualityComparer<T>を生成します. public static EqualityComparer<T> Create<T>(Func<T, T, bool> equals, Func<T, int> getHashCode) Parameters equals Func<T, T, bool> Equals(T, T)に使用する処理. getHashCode Func<T, int> GetHashCode(T)に使用する処理. Returns EqualityComparer<T> 生成されたEqualityComparer<T>. Type Parameters T 比較対象の型. Exceptions ArgumentNullException equalsがnullです. NotSupportedException getHashCodeがnullです."
  },
  "api/MinimalUtility.GameObjectPool-1.html": {
    "href": "api/MinimalUtility.GameObjectPool-1.html",
    "title": "Class GameObjectPool<T> | |",
    "keywords": "Class GameObjectPool<T> Namespace MinimalUtility ゲームオブジェクトのプール. 単一のルートオブジェクト下でのプーリングを想定. public class GameObjectPool<T> : IDisposable where T : MonoBehaviour Type Parameters T プールするMonoBehaviourの型. Inheritance object GameObjectPool<T> Implements IDisposable Derived AsyncGameObjectPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Constructors GameObjectPool(T, Transform, int) Initializes a new instance of the GameObjectPool<T> class. public GameObjectPool(T original, Transform root, int capacity) Parameters original T プール対象のオブジェクトのオリジナル. root Transform 生成するインスタンスの親オブジェクト. capacity int プールの初期容量. Fields original プール対象のオリジナル. protected readonly T original Field Value T pool プールのスタック. protected readonly Stack<T> pool Field Value Stack<T> root 生成するインスタンスの親オブジェクト. protected readonly Transform root Field Value Transform Properties CountInactive 現在プールにあるアイテムの総量. public virtual uint CountInactive { get; set; } Property Value uint DisposeToken 破棄トークン. protected CancellationToken DisposeToken { get; } Property Value CancellationToken Methods Clear() プールをクリアする. public void Clear() CreatePooledObject(T, GameObjectPool<T>) PooledObject<T>の生成メソッド. protected static PooledObject<T> CreatePooledObject(T instance, GameObjectPool<T> pool) Parameters instance T インスタンス. pool GameObjectPool<T> プール. Returns PooledObject<T> 生成したPooledObject<T>. Get() プールからインスタンスを取得する. public T Get() Returns T プールから取得したインスタンス. GetScope() プールからインスタンスを取得する(usingステートメントで使用するためのメソッド). public PooledObject<T> GetScope() Returns PooledObject<T> インスタンスをプールに戻すためのIDisposable. GetScope(out T) プールからインスタンスを取得する(usingステートメントで使用するためのメソッド). public PooledObject<T> GetScope(out T instance) Parameters instance T 取得したインスタンス. Returns PooledObject<T> インスタンスをプールに戻すためのIDisposable. Release(T) プールにインスタンスを返却する. public void Release(T element) Parameters element T 返却するインスタンス. ThrowIfDisposed() 破棄済みかどうかをチェックする. protected void ThrowIfDisposed() Exceptions ObjectDisposedException 破棄済みの場合にスローされる例外."
  },
  "api/MinimalUtility.MemoryExtensions.Enumerator-1.html": {
    "href": "api/MinimalUtility.MemoryExtensions.Enumerator-1.html",
    "title": "Struct MemoryExtensions.Enumerator<T> | |",
    "keywords": "Struct MemoryExtensions.Enumerator<T> Namespace MinimalUtility ReadOnlyMemory<T>のforeach対応. public struct MemoryExtensions.Enumerator<T> : IEnumerator<T>, IEnumerator, IDisposable Type Parameters T 要素の型. Implements IEnumerator<T> IEnumerator IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Current Gets the element in the collection at the current position of the enumerator. public T Current { get; } Property Value T The element in the collection at the current position of the enumerator. Methods MoveNext() Advances the enumerator to the next element of the collection. public bool MoveNext() Returns bool true if the enumerator was successfully advanced to the next element; false if the enumerator has passed the end of the collection. Exceptions InvalidOperationException The collection was modified after the enumerator was created. Reset() Sets the enumerator to its initial position, which is before the first element in the collection. public void Reset() Exceptions InvalidOperationException The collection was modified after the enumerator was created. NotSupportedException The enumerator does not support being reset."
  },
  "api/MinimalUtility.MemoryExtensions.html": {
    "href": "api/MinimalUtility.MemoryExtensions.html",
    "title": "Class MemoryExtensions | |",
    "keywords": "Class MemoryExtensions Namespace MinimalUtility Memory<T>, ReadOnlyMemory<T>の拡張メソッド. public static class MemoryExtensions Inheritance object MemoryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetEnumerator<T>(in Memory<T>) Memory<T>のforeach対応. public static MemoryExtensions.Enumerator<T> GetEnumerator<T>(this in Memory<T> memory) Parameters memory Memory<T> 対象のMemory<T>. Returns MemoryExtensions.Enumerator<T> 要素を列挙するSpan<T>.Enumerator. Type Parameters T 要素の型. GetEnumerator<T>(in ReadOnlyMemory<T>) ReadOnlyMemory<T>のforeach対応. public static MemoryExtensions.Enumerator<T> GetEnumerator<T>(this in ReadOnlyMemory<T> memory) Parameters memory ReadOnlyMemory<T> 対象のReadOnlyMemory<T>. Returns MemoryExtensions.Enumerator<T> 要素を列挙するReadOnlySpan<T>.Enumerator. Type Parameters T 要素の型."
  },
  "api/MinimalUtility.MeshConst.html": {
    "href": "api/MinimalUtility.MeshConst.html",
    "title": "Class MeshConst | |",
    "keywords": "Class MeshConst Namespace MinimalUtility プログラムで扱う頻度が高そうなMeshの定数群. public static class MeshConst Inheritance object MeshConst Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Cube プリミティブキューブ. public static Mesh Cube { get; } Property Value Mesh"
  },
  "api/MinimalUtility.PooledObject-1.html": {
    "href": "api/MinimalUtility.PooledObject-1.html",
    "title": "Struct PooledObject<T> | |",
    "keywords": "Struct PooledObject<T> Namespace MinimalUtility usingステートメントスコープを抜けた際にインスタンスをプールに返却する構造体. public readonly struct PooledObject<T> : IDisposable where T : MonoBehaviour Type Parameters T プールするMonoBehaviourの型. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Instance 生成済みのインスタンス. public readonly T Instance Field Value T"
  },
  "api/MinimalUtility.R3.ObservableExtensions.html": {
    "href": "api/MinimalUtility.R3.ObservableExtensions.html",
    "title": "Class ObservableExtensions | |",
    "keywords": "Class ObservableExtensions Namespace MinimalUtility.R3 ReactiveProperty<T>の拡張メソッド. public static class ObservableExtensions Inheritance object ObservableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Debug<T>(Observable<T>, string) Observable上で起きたすべてのイベントをログに出力する. public static Observable<T> Debug<T>(this Observable<T> source, string label = null) Parameters source Observable<T> 任意のObservable. label string ログに出力するラベル. Returns Observable<T> ログ出力を行うObservable. Type Parameters T Observableの型. Debug<T, TState>(Observable<T>, Func<T, TState>) Observable上で起きたすべてのイベントをログに出力する. public static Observable<T> Debug<T, TState>(this Observable<T> source, Func<T, TState> onNext) Parameters source Observable<T> 任意のObservable. onNext Func<T, TState> ログに出力したい値を取得する処理. Returns Observable<T> ログ出力を行うObservable. Type Parameters T Observableの型. TState ログに出力したい値の型. SubscribeLockAwait<T, TGate>(Observable<T>, TGate, Func<T, CancellationToken, ValueTask>) 連打禁止・同時押し禁止のための排他的なSubscribeAwaitを提供します. public static IDisposable SubscribeLockAwait<T, TGate>(this Observable<T> source, TGate gate, Func<T, CancellationToken, ValueTask> onNextAsync) where TGate : ReactiveProperty<bool> Parameters source Observable<T> 任意のObservable. gate TGate 排他制御用のReactiveProperty<T>. onNextAsync Func<T, CancellationToken, ValueTask> 非同期処理. Returns IDisposable 排他的な購読. Type Parameters T Observableの型. TGate 排他制御用のReactiveProperty<T>の型. SubscribeLock<T, TGate>(Observable<T>, TGate, Action<T>) 連打禁止・同時押し禁止のための排他的なSubscribeを提供します. public static IDisposable SubscribeLock<T, TGate>(this Observable<T> source, TGate gate, Action<T> onNext) where TGate : ReactiveProperty<bool> Parameters source Observable<T> 任意のObservable. gate TGate 排他制御用のReactiveProperty<T>. onNext Action<T> 非同期処理. Returns IDisposable 排他的な購読. Type Parameters T Observableの型. TGate 排他制御用のReactiveProperty<T>の型. WaitValueChangedAsync<T>(ReadOnlyReactiveProperty<T>, Func<T, bool>, in CancellationToken) 指定したReactiveProperty<T>の値が変更されるまで待機します. public static Task WaitValueChangedAsync<T>(this ReadOnlyReactiveProperty<T> source, Func<T, bool> predicate, in CancellationToken cancellationToken = default) Parameters source ReadOnlyReactiveProperty<T> 監視対象のReactiveProperty<T>. predicate Func<T, bool> 条件を満たすかどうかを判定する処理. cancellationToken CancellationToken キャンセルトークン. Returns Task 監視対象のReactiveProperty<T>の値が変更されたことを示すTask. Type Parameters T 監視対象のReactiveProperty<T>の型. WaitValueChangedAsync<T>(ReadOnlyReactiveProperty<T>, in CancellationToken) 指定したReactiveProperty<T>の値が変更されるまで待機します. public static Task WaitValueChangedAsync<T>(this ReadOnlyReactiveProperty<T> source, in CancellationToken cancellationToken = default) Parameters source ReadOnlyReactiveProperty<T> 監視対象のReactiveProperty<T>. cancellationToken CancellationToken キャンセルトークン. Returns Task 監視対象のReactiveProperty<T>の値が変更されたことを示すTask. Type Parameters T 監視対象のReactiveProperty<T>の型."
  },
  "api/MinimalUtility.R3.html": {
    "href": "api/MinimalUtility.R3.html",
    "title": "Namespace MinimalUtility.R3 | |",
    "keywords": "Namespace MinimalUtility.R3 Classes ObservableExtensions ReactiveProperty<T>の拡張メソッド."
  },
  "api/MinimalUtility.RectTransformExtensions.html": {
    "href": "api/MinimalUtility.RectTransformExtensions.html",
    "title": "Class RectTransformExtensions | |",
    "keywords": "Class RectTransformExtensions Namespace MinimalUtility RectTransformの拡張メソッド. public static class RectTransformExtensions Inheritance object RectTransformExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetLocalCorners(RectTransform, in Span<Vector3>) RectTransformのローカル空間で計算された長方形の角を取得する. RectTransform.GetLocalCorners(Vector3[])に同じ. public static ReadOnlySpan<Vector3> GetLocalCorners(this RectTransform target, in Span<Vector3> fourCornersSpan) Parameters target RectTransform 対象のRectTransform. fourCornersSpan Span<Vector3> 取得した角の座標を格納するSpan<T>. Returns ReadOnlySpan<Vector3> 取得した角の座標を格納したReadOnlySpan<T>. GetSize(RectTransform) RectTransform.sizeDeltaよりも安全なサイズ取得. public static Vector2 GetSize(this RectTransform target) Parameters target RectTransform 対象のRectTransform. Returns Vector2 対象のサイズ. GetWorldCorners(RectTransform, in Span<Vector3>) ワールドスペースで計算された長方形の角を取得する. RectTransform.GetWorldCorners(Vector3[])に同じ. public static ReadOnlySpan<Vector3> GetWorldCorners(this RectTransform target, in Span<Vector3> fourCornersSpan) Parameters target RectTransform 対象のRectTransform. fourCornersSpan Span<Vector3> 取得した角の座標を格納するSpan<T>. Returns ReadOnlySpan<Vector3> 取得した角の座標を格納したReadOnlySpan<T>. SetFullStretch(RectTransform, in float, in float, in float, in float) RectTransformを全面的に伸ばす(stretch * stretchにする). public static void SetFullStretch(this RectTransform target, in float left = 0, in float right = 0, in float top = 0, in float bottom = 0) Parameters target RectTransform 対象のRectTransform. left float 左端のオフセット. right float 右端のオフセット. top float 上端のオフセット. bottom float 下端のオフセット. SetSafeHeight(RectTransform, in float) RectTransform.sizeDeltaよりも安全な縦幅設定. public static void SetSafeHeight(this RectTransform target, in float height) Parameters target RectTransform 対象のRectTransform. height float 縦の長さ. SetSafeSize(RectTransform, in float, in float) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, in float width, in float height) Parameters target RectTransform 対象のRectTransform. width float 横の長さ. height float 縦の長さ. SetSafeSize(RectTransform, Vector2) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, Vector2 size) Parameters target RectTransform 対象のRectTransform. size Vector2 任意の縦横サイズ. SetSafeWidth(RectTransform, in float) RectTransform.sizeDeltaよりも安全な横幅設定. public static void SetSafeWidth(this RectTransform target, in float width) Parameters target RectTransform 対象のRectTransform. width float 横の長さ."
  },
  "api/MinimalUtility.SafeAreaAdjuster.html": {
    "href": "api/MinimalUtility.SafeAreaAdjuster.html",
    "title": "Class SafeAreaAdjuster | |",
    "keywords": "Class SafeAreaAdjuster Namespace MinimalUtility セーフエリア調整スクリプト. public sealed class SafeAreaAdjuster : MonoBehaviour Inheritance object SafeAreaAdjuster"
  },
  "api/MinimalUtility.StringUtils.html": {
    "href": "api/MinimalUtility.StringUtils.html",
    "title": "Class StringUtils | |",
    "keywords": "Class StringUtils Namespace MinimalUtility 文字列を扱うための静的メソッド群を提供します. public static class StringUtils Inheritance object StringUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Join(in char, IEnumerable<string?>) 内部でDefaultInterpolatedStringHandlerを使用したJoin<T>(char, IEnumerable<T>). public static string Join(in char separator, IEnumerable<string?> values) Parameters separator char 区切り文字. values IEnumerable<string> 連結する文字列のコレクション. Returns string 連結された文字列. Exceptions ArgumentNullException valuesがnullの場合にスローされます. Join(in ReadOnlySpan<char>, IEnumerable<string?>) 内部でDefaultInterpolatedStringHandlerを使用したstring.Join. public static string Join(in ReadOnlySpan<char> separator, IEnumerable<string?> values) Parameters separator ReadOnlySpan<char> 区切り文字列. values IEnumerable<string> 連結する文字列のコレクション. Returns string 連結された文字列. Exceptions ArgumentNullException valuesがnullの場合にスローされます. Join(in string?, IEnumerable<string?>) 内部でDefaultInterpolatedStringHandlerを使用したJoin(string, IEnumerable<string>). public static string Join(in string? separator, IEnumerable<string?> values) Parameters separator string 区切り文字列. values IEnumerable<string> 連結する文字列のコレクション. Returns string 連結された文字列. Exceptions ArgumentNullException valuesがnullの場合にスローされます."
  },
  "api/MinimalUtility.Tasks.AsyncGameObjectPool-1.html": {
    "href": "api/MinimalUtility.Tasks.AsyncGameObjectPool-1.html",
    "title": "Class AsyncGameObjectPool<T> | |",
    "keywords": "Class AsyncGameObjectPool<T> Namespace MinimalUtility.Tasks 非同期でGameObjectをプールするクラス. public class AsyncGameObjectPool<T> : GameObjectPool<T>, IDisposable where T : MonoBehaviour Type Parameters T プールするMonoBehaviourの型. Inheritance object GameObjectPool<T> AsyncGameObjectPool<T> Implements IDisposable Inherited Members GameObjectPool<T>.original GameObjectPool<T>.root GameObjectPool<T>.pool GameObjectPool<T>.DisposeToken GameObjectPool<T>.Get() GameObjectPool<T>.GetScope() GameObjectPool<T>.GetScope(out T) GameObjectPool<T>.Release(T) GameObjectPool<T>.Clear() GameObjectPool<T>.CreatePooledObject(T, GameObjectPool<T>) GameObjectPool<T>.ThrowIfDisposed() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Constructors AsyncGameObjectPool(T, Transform, int) Initializes a new instance of the AsyncGameObjectPool<T> class. public AsyncGameObjectPool(T original, Transform root, int capacity) Parameters original T プール対象のオブジェクトのオリジナル. root Transform 生成するインスタンスの親オブジェクト. capacity int プールの初期容量. Properties CountInactive 現在プールにあるアイテムの総量. public override uint CountInactive { get; set; } Property Value uint Methods GetAsync(int, CancellationToken) プールから非同期でインスタンスを取得する. public UniTask<T[]> GetAsync(int count, CancellationToken cancellationToken = default) Parameters count int 取得するインスタンスの数. cancellationToken CancellationToken キャンセルトークン. Returns UniTask<T[]> 取得したインスタンス. GetAsync(CancellationToken) プールから非同期でインスタンスを取得する. public UniTask<T> GetAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken キャンセルトークン. Returns UniTask<T> 取得したインスタンス. GetScopeAsync(CancellationToken) プールから非同期でインスタンスを取得する(usingステートメントで使用するためのメソッド). public UniTask<PooledObject<T>> GetScopeAsync(CancellationToken cancellationToken = default) Parameters cancellationToken CancellationToken キャンセルトークン. Returns UniTask<PooledObject<T>> 取得したインスタンスと解放用のIDisposable."
  },
  "api/MinimalUtility.Tasks.UniTaskExtensions.html": {
    "href": "api/MinimalUtility.Tasks.UniTaskExtensions.html",
    "title": "Class UniTaskExtensions | |",
    "keywords": "Class UniTaskExtensions Namespace MinimalUtility.Tasks UniTaskの拡張メソッド. public static class UniTaskExtensions Inheritance object UniTaskExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WaitForEndFrameSafety(MonoBehaviour, bool) UniTask.WaitForEndOfFrame(MonoBehaviour)は内部にコルーチンを含む. そのためコルーチンの駆動元であるMonoBehaviourが非表示になるとエラーが発生する. それを回避したうえで安全にフレーム終わりまで待機する. public static UniTask WaitForEndFrameSafety(this MonoBehaviour monoBehaviour, bool cancelImmediately = false) Parameters monoBehaviour MonoBehaviour コルーチン駆動の基盤となるMonoBehaviour. cancelImmediately bool 即座にキャンセルするかどうか. Returns UniTask フレーム終わりまで待機するUniTask. WaitForEndFrameSafety(MonoBehaviour, CancellationToken, bool) UniTask.WaitForEndOfFrame(MonoBehaviour)は内部にコルーチンを含む. そのためコルーチンの駆動元であるMonoBehaviourが非表示になるとエラーが発生する. それを回避したうえで安全にフレーム終わりまで待機する. public static UniTask WaitForEndFrameSafety(this MonoBehaviour monoBehaviour, CancellationToken cancellationToken, bool cancelImmediately = false) Parameters monoBehaviour MonoBehaviour コルーチン駆動の基盤となるMonoBehaviour. cancellationToken CancellationToken キャンセルトークン. cancelImmediately bool 即座にキャンセルするかどうか. Returns UniTask フレーム終わりまで待機するUniTask."
  },
  "api/MinimalUtility.Tasks.html": {
    "href": "api/MinimalUtility.Tasks.html",
    "title": "Namespace MinimalUtility.Tasks | |",
    "keywords": "Namespace MinimalUtility.Tasks Classes AsyncGameObjectPool<T> 非同期でGameObjectをプールするクラス. UniTaskExtensions UniTaskの拡張メソッド."
  },
  "api/MinimalUtility.UGUI.EmptyGraphic.html": {
    "href": "api/MinimalUtility.UGUI.EmptyGraphic.html",
    "title": "Class EmptyGraphic | |",
    "keywords": "Class EmptyGraphic Namespace MinimalUtility.UGUI 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき public class EmptyGraphic : Graphic Inheritance object EmptyGraphic Derived SelectablesGraphic Methods OnPopulateMesh(VertexHelper) protected override void OnPopulateMesh(VertexHelper vh) Parameters vh VertexHelper SetMaterialDirty() public override void SetMaterialDirty() SetVerticesDirty() public override void SetVerticesDirty()"
  },
  "api/MinimalUtility.UGUI.SelectablesGraphic.html": {
    "href": "api/MinimalUtility.UGUI.SelectablesGraphic.html",
    "title": "Class SelectablesGraphic | |",
    "keywords": "Class SelectablesGraphic Namespace MinimalUtility.UGUI UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる public sealed class SelectablesGraphic : EmptyGraphic Inheritance object EmptyGraphic SelectablesGraphic Inherited Members EmptyGraphic.SetMaterialDirty() EmptyGraphic.SetVerticesDirty() Methods CrossFadeColor(Color, float, bool, bool) public override void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) Parameters targetColor Color duration float ignoreTimeScale bool useAlpha bool Start() protected override void Start()"
  },
  "api/MinimalUtility.UGUI.SimpleGauge.html": {
    "href": "api/MinimalUtility.UGUI.SimpleGauge.html",
    "title": "Class SimpleGauge | |",
    "keywords": "Class SimpleGauge Namespace MinimalUtility.UGUI RectMask2Dを継承利用したシンプルで綺麗なゲージ表示. public class SimpleGauge : RectMask2D Inheritance object SimpleGauge Properties Graphic ゲージの表示に使用するMaskableGraphic. public MaskableGraphic Graphic { get; } Property Value MaskableGraphic Value ゲージの値(0.0 ～ 1.0). public float Value { get; set; } Property Value float Methods OnEnable() protected override void OnEnable()"
  },
  "api/MinimalUtility.UGUI.html": {
    "href": "api/MinimalUtility.UGUI.html",
    "title": "Namespace MinimalUtility.UGUI | |",
    "keywords": "Namespace MinimalUtility.UGUI Classes EmptyGraphic 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき SelectablesGraphic UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる SimpleGauge RectMask2Dを継承利用したシンプルで綺麗なゲージ表示."
  },
  "api/MinimalUtility.UIToolkit.SafeAreaContainer.SafeAreaContainerFactory.html": {
    "href": "api/MinimalUtility.UIToolkit.SafeAreaContainer.SafeAreaContainerFactory.html",
    "title": "Class SafeAreaContainer.SafeAreaContainerFactory | |",
    "keywords": "Class SafeAreaContainer.SafeAreaContainerFactory Namespace MinimalUtility.UIToolkit UIBuilderのLibraryに登録するためのUXML要素のファクトリクラス. public class SafeAreaContainer.SafeAreaContainerFactory : UxmlFactory<SafeAreaContainer, UxmlTraits> Inheritance object SafeAreaContainer.SafeAreaContainerFactory"
  },
  "api/MinimalUtility.UIToolkit.SafeAreaContainer.html": {
    "href": "api/MinimalUtility.UIToolkit.SafeAreaContainer.html",
    "title": "Class SafeAreaContainer | |",
    "keywords": "Class SafeAreaContainer Namespace MinimalUtility.UIToolkit セーフエリアを考慮したVisualElement. public class SafeAreaContainer : VisualElement Inheritance object SafeAreaContainer Constructors SafeAreaContainer() Initializes a new instance of the SafeAreaContainer class. public SafeAreaContainer()"
  },
  "api/MinimalUtility.UIToolkit.html": {
    "href": "api/MinimalUtility.UIToolkit.html",
    "title": "Namespace MinimalUtility.UIToolkit | |",
    "keywords": "Namespace MinimalUtility.UIToolkit Classes SafeAreaContainer セーフエリアを考慮したVisualElement. SafeAreaContainer.SafeAreaContainerFactory UIBuilderのLibraryに登録するためのUXML要素のファクトリクラス."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-1.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-1.html",
    "title": "Class EntryPointContainer<T1> | |",
    "keywords": "Class EntryPointContainer<T1> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1> : IStartable where T1 : class Type Parameters T1 発火する1番目のインスタンスの型. Inheritance object EntryPointContainer<T1> Constructors EntryPointContainer(T1, CancellationToken, Action<T1, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1> class. public EntryPointContainer(T1 instance1, CancellationToken cancellationToken, Action<T1, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-10.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-10.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-11.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-11.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class where T11 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. T11 発火する11番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, T11 instance11, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. instance11 T11 発火する11番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-12.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-12.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class where T11 : class where T12 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. T11 発火する11番目のインスタンスの型. T12 発火する12番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, T11 instance11, T12 instance12, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. instance11 T11 発火する11番目のインスタンス. instance12 T12 発火する12番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-13.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-13.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class where T11 : class where T12 : class where T13 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. T11 発火する11番目のインスタンスの型. T12 発火する12番目のインスタンスの型. T13 発火する13番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, T11 instance11, T12 instance12, T13 instance13, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. instance11 T11 発火する11番目のインスタンス. instance12 T12 発火する12番目のインスタンス. instance13 T13 発火する13番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-14.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-14.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class where T11 : class where T12 : class where T13 : class where T14 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. T11 発火する11番目のインスタンスの型. T12 発火する12番目のインスタンスの型. T13 発火する13番目のインスタンスの型. T14 発火する14番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, T11 instance11, T12 instance12, T13 instance13, T14 instance14, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. instance11 T11 発火する11番目のインスタンス. instance12 T12 発火する12番目のインスタンス. instance13 T13 発火する13番目のインスタンス. instance14 T14 発火する14番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-15.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-15.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class where T10 : class where T11 : class where T12 : class where T13 : class where T14 : class where T15 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. T10 発火する10番目のインスタンスの型. T11 発火する11番目のインスタンスの型. T12 発火する12番目のインスタンスの型. T13 発火する13番目のインスタンスの型. T14 発火する14番目のインスタンスの型. T15 発火する15番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, T10 instance10, T11 instance11, T12 instance12, T13 instance13, T14 instance14, T15 instance15, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. instance10 T10 発火する10番目のインスタンス. instance11 T11 発火する11番目のインスタンス. instance12 T12 発火する12番目のインスタンス. instance13 T13 発火する13番目のインスタンス. instance14 T14 発火する14番目のインスタンス. instance15 T15 発火する15番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-2.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-2.html",
    "title": "Class EntryPointContainer<T1, T2> | |",
    "keywords": "Class EntryPointContainer<T1, T2> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2> : IStartable where T1 : class where T2 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2> Constructors EntryPointContainer(T1, T2, CancellationToken, Action<T1, T2, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2> class. public EntryPointContainer(T1 instance1, T2 instance2, CancellationToken cancellationToken, Action<T1, T2, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-3.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-3.html",
    "title": "Class EntryPointContainer<T1, T2, T3> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3> : IStartable where T1 : class where T2 : class where T3 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3> Constructors EntryPointContainer(T1, T2, T3, CancellationToken, Action<T1, T2, T3, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, CancellationToken cancellationToken, Action<T1, T2, T3, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-4.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-4.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4> Constructors EntryPointContainer(T1, T2, T3, T4, CancellationToken, Action<T1, T2, T3, T4, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, CancellationToken cancellationToken, Action<T1, T2, T3, T4, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-5.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-5.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5> Constructors EntryPointContainer(T1, T2, T3, T4, T5, CancellationToken, Action<T1, T2, T3, T4, T5, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-6.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-6.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, CancellationToken, Action<T1, T2, T3, T4, T5, T6, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-7.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-7.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-8.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-8.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.EntryPointContainer-9.html": {
    "href": "api/MinimalUtility.VContainer.EntryPointContainer-9.html",
    "title": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> | |",
    "keywords": "Class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> Namespace MinimalUtility.VContainer エントリーポイントを一括管理するコンテナクラス. public sealed class EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IStartable where T1 : class where T2 : class where T3 : class where T4 : class where T5 : class where T6 : class where T7 : class where T8 : class where T9 : class Type Parameters T1 発火する1番目のインスタンスの型. T2 発火する2番目のインスタンスの型. T3 発火する3番目のインスタンスの型. T4 発火する4番目のインスタンスの型. T5 発火する5番目のインスタンスの型. T6 発火する6番目のインスタンスの型. T7 発火する7番目のインスタンスの型. T8 発火する8番目のインスタンスの型. T9 発火する9番目のインスタンスの型. Inheritance object EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> Constructors EntryPointContainer(T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken>) Initializes a new instance of the EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> class. public EntryPointContainer(T1 instance1, T2 instance2, T3 instance3, T4 instance4, T5 instance5, T6 instance6, T7 instance7, T8 instance8, T9 instance9, CancellationToken cancellationToken, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken> start) Parameters instance1 T1 発火する1番目のインスタンス. instance2 T2 発火する2番目のインスタンス. instance3 T3 発火する3番目のインスタンス. instance4 T4 発火する4番目のインスタンス. instance5 T5 発火する5番目のインスタンス. instance6 T6 発火する6番目のインスタンス. instance7 T7 発火する7番目のインスタンス. instance8 T8 発火する8番目のインスタンス. instance9 T9 発火する9番目のインスタンス. cancellationToken CancellationToken キャンセルトークン. start Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken> 発火する処理."
  },
  "api/MinimalUtility.VContainer.LifetimeScopeBase.html": {
    "href": "api/MinimalUtility.VContainer.LifetimeScopeBase.html",
    "title": "Class LifetimeScopeBase | |",
    "keywords": "Class LifetimeScopeBase Namespace MinimalUtility.VContainer LifetimeScopeの共通基底クラス. public class LifetimeScopeBase : LifetimeScope Inheritance object LifetimeScopeBase Methods Configure(IContainerBuilder) protected override void Configure(IContainerBuilder builder) Parameters builder IContainerBuilder"
  },
  "api/MinimalUtility.VContainer.VContainerEntryPointExtensions.html": {
    "href": "api/MinimalUtility.VContainer.VContainerEntryPointExtensions.html",
    "title": "Class VContainerEntryPointExtensions | |",
    "keywords": "Class VContainerEntryPointExtensions Namespace MinimalUtility.VContainer MinimalUtility.VContainerの拡張メソッド. public static class VContainerEntryPointExtensions Inheritance object VContainerEntryPointExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods WithEntryParameter<T1>(RegistrationBuilder, Action<T1, CancellationToken>) EntryPointContainer<T1>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1>(this RegistrationBuilder builder, Action<T1, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. T11 エントリーポイント制御引数の11番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. T11 エントリーポイント制御引数の11番目の型. T12 エントリーポイント制御引数の12番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. T11 エントリーポイント制御引数の11番目の型. T12 エントリーポイント制御引数の12番目の型. T13 エントリーポイント制御引数の13番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. T11 エントリーポイント制御引数の11番目の型. T12 エントリーポイント制御引数の12番目の型. T13 エントリーポイント制御引数の13番目の型. T14 エントリーポイント制御引数の14番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型. T10 エントリーポイント制御引数の10番目の型. T11 エントリーポイント制御引数の11番目の型. T12 エントリーポイント制御引数の12番目の型. T13 エントリーポイント制御引数の13番目の型. T14 エントリーポイント制御引数の14番目の型. T15 エントリーポイント制御引数の15番目の型. WithEntryParameter<T1, T2>(RegistrationBuilder, Action<T1, T2, CancellationToken>) EntryPointContainer<T1, T2>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2>(this RegistrationBuilder builder, Action<T1, T2, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. WithEntryParameter<T1, T2, T3>(RegistrationBuilder, Action<T1, T2, T3, CancellationToken>) EntryPointContainer<T1, T2, T3>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3>(this RegistrationBuilder builder, Action<T1, T2, T3, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. WithEntryParameter<T1, T2, T3, T4>(RegistrationBuilder, Action<T1, T2, T3, T4, CancellationToken>) EntryPointContainer<T1, T2, T3, T4>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. WithEntryParameter<T1, T2, T3, T4, T5>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9>(RegistrationBuilder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken>) EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9>に登録するエントリーポイント制御引数. public static RegistrationBuilder WithEntryParameter<T1, T2, T3, T4, T5, T6, T7, T8, T9>(this RegistrationBuilder builder, Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken> entry) Parameters builder RegistrationBuilder RegistrationBuilder. entry Action<T1, T2, T3, T4, T5, T6, T7, T8, T9, CancellationToken> エントリーポイント制御引数. Returns RegistrationBuilder RegistrationBuilder.WithParameter<T>(T)で登録済みのRegistrationBuilder. Type Parameters T1 エントリーポイント制御引数の1番目の型. T2 エントリーポイント制御引数の2番目の型. T3 エントリーポイント制御引数の3番目の型. T4 エントリーポイント制御引数の4番目の型. T5 エントリーポイント制御引数の5番目の型. T6 エントリーポイント制御引数の6番目の型. T7 エントリーポイント制御引数の7番目の型. T8 エントリーポイント制御引数の8番目の型. T9 エントリーポイント制御引数の9番目の型."
  },
  "api/MinimalUtility.VContainer.html": {
    "href": "api/MinimalUtility.VContainer.html",
    "title": "Namespace MinimalUtility.VContainer | |",
    "keywords": "Namespace MinimalUtility.VContainer Classes EntryPointContainer<T1> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8> エントリーポイントを一括管理するコンテナクラス. EntryPointContainer<T1, T2, T3, T4, T5, T6, T7, T8, T9> エントリーポイントを一括管理するコンテナクラス. LifetimeScopeBase LifetimeScopeの共通基底クラス. VContainerEntryPointExtensions MinimalUtility.VContainerの拡張メソッド."
  },
  "api/MinimalUtility.ValueDisposable.Disposable-1.html": {
    "href": "api/MinimalUtility.ValueDisposable.Disposable-1.html",
    "title": "Struct ValueDisposable.Disposable<T> | |",
    "keywords": "Struct ValueDisposable.Disposable<T> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct ValueDisposable.Disposable<T> : IDisposable Type Parameters T 破棄時に呼び出す処理の引数の型. Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/MinimalUtility.ValueDisposable.Disposable.html": {
    "href": "api/MinimalUtility.ValueDisposable.Disposable.html",
    "title": "Struct ValueDisposable.Disposable | |",
    "keywords": "Struct ValueDisposable.Disposable Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly struct ValueDisposable.Disposable : IDisposable Implements IDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/MinimalUtility.ValueDisposable.html": {
    "href": "api/MinimalUtility.ValueDisposable.html",
    "title": "Class ValueDisposable | |",
    "keywords": "Class ValueDisposable Namespace MinimalUtility 値型で軽量なIDisposableのファクトリ. usingステートメントでの仕様を想定しており、IDisposableにキャストするとアロケーションが発生する. IDisposableにキャストして使用したい場合は素直に専用クラス実装するか、RxライブラリのIDisposableファクトリを使用する. public static class ValueDisposable Inheritance object ValueDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create(Action) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static ValueDisposable.Disposable Create(Action onDispose) Parameters onDispose Action 破棄時に呼び出す処理. Returns ValueDisposable.Disposable usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Create<T>(T, Action<T>) usingステートメントスコープを抜けた際にコールバックを呼び出す構造体のファクトリメソッド. public static ValueDisposable.Disposable<T> Create<T>(T state1, Action<T> onDispose) Parameters state1 T 第一引数. onDispose Action<T> 破棄時に呼び出す処理. Returns ValueDisposable.Disposable<T> usingステートメントスコープを抜けた際にコールバックを呼び出す構造体. Type Parameters T 破棄時に呼び出す処理の引数の型."
  },
  "api/MinimalUtility.VectorExtensions.html": {
    "href": "api/MinimalUtility.VectorExtensions.html",
    "title": "Class VectorExtensions | |",
    "keywords": "Class VectorExtensions Namespace MinimalUtility Vector3の拡張クラス. public static class VectorExtensions Inheritance object VectorExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods XZ(in Vector3) Vector3のXZ成分だけ取り出す public static Vector2 XZ(this in Vector3 target) Parameters target Vector3 対象. Returns Vector2 対象のx成分をx, z成分をyに保持するVector2. YZ(in Vector3) Vector3のYZ成分だけ取り出す public static Vector2 YZ(this in Vector3 target) Parameters target Vector3 対象. Returns Vector2 対象のy成分をx, z成分をzに保持するVector2."
  },
  "api/MinimalUtility.WebRequest.UnityWebRequestHttpMessageHandler.html": {
    "href": "api/MinimalUtility.WebRequest.UnityWebRequestHttpMessageHandler.html",
    "title": "Class UnityWebRequestHttpMessageHandler | |",
    "keywords": "Class UnityWebRequestHttpMessageHandler Namespace MinimalUtility.WebRequest UniTaskのサポートを活用した、UnityWebRequestを使用するHttpMessageHandler. public class UnityWebRequestHttpMessageHandler : HttpMessageHandler, IDisposable Inheritance object HttpMessageHandler UnityWebRequestHttpMessageHandler Implements IDisposable Inherited Members HttpMessageHandler.Dispose() HttpMessageHandler.Dispose(bool) HttpMessageHandler.Send(HttpRequestMessage, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Methods SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage, CancellationToken cancellationToken) Parameters requestMessage HttpRequestMessage cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null."
  },
  "api/MinimalUtility.WebRequest.html": {
    "href": "api/MinimalUtility.WebRequest.html",
    "title": "Namespace MinimalUtility.WebRequest | |",
    "keywords": "Namespace MinimalUtility.WebRequest Classes UnityWebRequestHttpMessageHandler UniTaskのサポートを活用した、UnityWebRequestを使用するHttpMessageHandler."
  },
  "api/MinimalUtility.html": {
    "href": "api/MinimalUtility.html",
    "title": "Namespace MinimalUtility | |",
    "keywords": "Namespace MinimalUtility Classes ButtonAttribute 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. ComponentExtensions Componentの拡張メソッド. DisposableExtensions IDisposableの拡張メソッド. EqualityComparer EqualityComparer<T>の拡張クラス. GameObjectPool<T> ゲームオブジェクトのプール. 単一のルートオブジェクト下でのプーリングを想定. MemoryExtensions Memory<T>, ReadOnlyMemory<T>の拡張メソッド. MeshConst プログラムで扱う頻度が高そうなMeshの定数群. RectTransformExtensions RectTransformの拡張メソッド. SafeAreaAdjuster セーフエリア調整スクリプト. StringUtils 文字列を扱うための静的メソッド群を提供します. ValueDisposable 値型で軽量なIDisposableのファクトリ. usingステートメントでの仕様を想定しており、IDisposableにキャストするとアロケーションが発生する. IDisposableにキャストして使用したい場合は素直に専用クラス実装するか、RxライブラリのIDisposableファクトリを使用する. VectorExtensions Vector3の拡張クラス. Structs MemoryExtensions.Enumerator<T> ReadOnlyMemory<T>のforeach対応. PooledObject<T> usingステートメントスコープを抜けた際にインスタンスをプールに返却する構造体. ValueDisposable.Disposable usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. ValueDisposable.Disposable<T> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体."
  },
  "api/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.html",
    "title": "Class CallerArgumentExpressionAttribute | |",
    "keywords": "Class CallerArgumentExpressionAttribute Namespace System.Runtime.CompilerServices [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)] public sealed class CallerArgumentExpressionAttribute : Attribute Inheritance object Attribute CallerArgumentExpressionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors CallerArgumentExpressionAttribute(string) public CallerArgumentExpressionAttribute(string parameterName) Parameters parameterName string Properties ParameterName public string ParameterName { get; } Property Value string"
  },
  "api/System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.html": {
    "href": "api/System.Runtime.CompilerServices.DefaultInterpolatedStringHandler.html",
    "title": "Struct DefaultInterpolatedStringHandler | |",
    "keywords": "Struct DefaultInterpolatedStringHandler Namespace System.Runtime.CompilerServices Provides a handler used by the language compiler to process interpolated strings into string instances. public ref struct DefaultInterpolatedStringHandler Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors DefaultInterpolatedStringHandler(int, int) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. DefaultInterpolatedStringHandler(int, int, IFormatProvider?) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider? provider) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. provider IFormatProvider An object that supplies culture-specific formatting information. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. DefaultInterpolatedStringHandler(int, int, IFormatProvider?, Span<char>) Creates a handler used to translate an interpolated string into a string. public DefaultInterpolatedStringHandler(int literalLength, int formattedCount, IFormatProvider? provider, Span<char> initialBuffer) Parameters literalLength int The number of constant characters outside of interpolation expressions in the interpolated string. formattedCount int The number of interpolation expressions in the interpolated string. provider IFormatProvider An object that supplies culture-specific formatting information. initialBuffer Span<char> A buffer temporarily transferred to the handler for use as part of its formatting. Contents may be overwritten. Remarks This is intended to be called only by compiler-generated code. Arguments are not validated as they'd otherwise be for members intended to be used directly. Methods AppendFormatted(bool) public void AppendFormatted(bool value) Parameters value bool AppendFormatted(bool, int) public void AppendFormatted(bool value, int alignment) Parameters value bool alignment int AppendFormatted(bool, int, string?) public void AppendFormatted(bool value, int alignment, string? format) Parameters value bool alignment int format string AppendFormatted(bool, string?) public void AppendFormatted(bool value, string? format) Parameters value bool format string AppendFormatted(byte) public void AppendFormatted(byte value) Parameters value byte AppendFormatted(byte, int) public void AppendFormatted(byte value, int alignment) Parameters value byte alignment int AppendFormatted(byte, int, string?) public void AppendFormatted(byte value, int alignment, string? format) Parameters value byte alignment int format string AppendFormatted(byte, string?) public void AppendFormatted(byte value, string? format) Parameters value byte format string AppendFormatted(DateTime) public void AppendFormatted(DateTime value) Parameters value DateTime AppendFormatted(DateTime, int) public void AppendFormatted(DateTime value, int alignment) Parameters value DateTime alignment int AppendFormatted(DateTime, int, string?) public void AppendFormatted(DateTime value, int alignment, string? format) Parameters value DateTime alignment int format string AppendFormatted(DateTime, string?) public void AppendFormatted(DateTime value, string? format) Parameters value DateTime format string AppendFormatted(DateTimeOffset) public void AppendFormatted(DateTimeOffset value) Parameters value DateTimeOffset AppendFormatted(DateTimeOffset, int) public void AppendFormatted(DateTimeOffset value, int alignment) Parameters value DateTimeOffset alignment int AppendFormatted(DateTimeOffset, int, string?) public void AppendFormatted(DateTimeOffset value, int alignment, string? format) Parameters value DateTimeOffset alignment int format string AppendFormatted(DateTimeOffset, string?) public void AppendFormatted(DateTimeOffset value, string? format) Parameters value DateTimeOffset format string AppendFormatted(decimal) public void AppendFormatted(decimal value) Parameters value decimal AppendFormatted(decimal, int) public void AppendFormatted(decimal value, int alignment) Parameters value decimal alignment int AppendFormatted(decimal, int, string?) public void AppendFormatted(decimal value, int alignment, string? format) Parameters value decimal alignment int format string AppendFormatted(decimal, string?) public void AppendFormatted(decimal value, string? format) Parameters value decimal format string AppendFormatted(double) public void AppendFormatted(double value) Parameters value double AppendFormatted(double, int) public void AppendFormatted(double value, int alignment) Parameters value double alignment int AppendFormatted(double, int, string?) public void AppendFormatted(double value, int alignment, string? format) Parameters value double alignment int format string AppendFormatted(double, string?) public void AppendFormatted(double value, string? format) Parameters value double format string AppendFormatted(Guid) public void AppendFormatted(Guid value) Parameters value Guid AppendFormatted(Guid, int) public void AppendFormatted(Guid value, int alignment) Parameters value Guid alignment int AppendFormatted(Guid, int, string?) public void AppendFormatted(Guid value, int alignment, string? format) Parameters value Guid alignment int format string AppendFormatted(Guid, string?) public void AppendFormatted(Guid value, string? format) Parameters value Guid format string AppendFormatted(short) public void AppendFormatted(short value) Parameters value short AppendFormatted(short, int) public void AppendFormatted(short value, int alignment) Parameters value short alignment int AppendFormatted(short, int, string?) public void AppendFormatted(short value, int alignment, string? format) Parameters value short alignment int format string AppendFormatted(short, string?) public void AppendFormatted(short value, string? format) Parameters value short format string AppendFormatted(int) public void AppendFormatted(int value) Parameters value int AppendFormatted(int, int) public void AppendFormatted(int value, int alignment) Parameters value int alignment int AppendFormatted(int, int, string?) public void AppendFormatted(int value, int alignment, string? format) Parameters value int alignment int format string AppendFormatted(int, string?) public void AppendFormatted(int value, string? format) Parameters value int format string AppendFormatted(long) public void AppendFormatted(long value) Parameters value long AppendFormatted(long, int) public void AppendFormatted(long value, int alignment) Parameters value long alignment int AppendFormatted(long, int, string?) public void AppendFormatted(long value, int alignment, string? format) Parameters value long alignment int format string AppendFormatted(long, string?) public void AppendFormatted(long value, string? format) Parameters value long format string AppendFormatted(object?, int, string?) Writes the specified value to the handler. public void AppendFormatted(object? value, int alignment = 0, string? format = null) Parameters value object The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(ReadOnlySpan<char>) Writes the specified character span to the handler. public void AppendFormatted(ReadOnlySpan<char> value) Parameters value ReadOnlySpan<char> The span to write. AppendFormatted(ReadOnlySpan<char>, int, string?) Writes the specified string of chars to the handler. public void AppendFormatted(ReadOnlySpan<char> value, int alignment = 0, string? format = null) Parameters value ReadOnlySpan<char> The span to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(sbyte) public void AppendFormatted(sbyte value) Parameters value sbyte AppendFormatted(sbyte, int) public void AppendFormatted(sbyte value, int alignment) Parameters value sbyte alignment int AppendFormatted(sbyte, int, string?) public void AppendFormatted(sbyte value, int alignment, string? format) Parameters value sbyte alignment int format string AppendFormatted(sbyte, string?) public void AppendFormatted(sbyte value, string? format) Parameters value sbyte format string AppendFormatted(float) public void AppendFormatted(float value) Parameters value float AppendFormatted(float, int) public void AppendFormatted(float value, int alignment) Parameters value float alignment int AppendFormatted(float, int, string?) public void AppendFormatted(float value, int alignment, string? format) Parameters value float alignment int format string AppendFormatted(float, string?) public void AppendFormatted(float value, string? format) Parameters value float format string AppendFormatted(string?) Writes the specified value to the handler. public void AppendFormatted(string? value) Parameters value string The value to write. AppendFormatted(string?, int, string?) Writes the specified value to the handler. public void AppendFormatted(string? value, int alignment = 0, string? format = null) Parameters value string The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. AppendFormatted(TimeSpan) public void AppendFormatted(TimeSpan value) Parameters value TimeSpan AppendFormatted(TimeSpan, int) public void AppendFormatted(TimeSpan value, int alignment) Parameters value TimeSpan alignment int AppendFormatted(TimeSpan, int, string?) public void AppendFormatted(TimeSpan value, int alignment, string? format) Parameters value TimeSpan alignment int format string AppendFormatted(TimeSpan, string?) public void AppendFormatted(TimeSpan value, string? format) Parameters value TimeSpan format string AppendFormatted(ushort) public void AppendFormatted(ushort value) Parameters value ushort AppendFormatted(ushort, int) public void AppendFormatted(ushort value, int alignment) Parameters value ushort alignment int AppendFormatted(ushort, int, string?) public void AppendFormatted(ushort value, int alignment, string? format) Parameters value ushort alignment int format string AppendFormatted(ushort, string?) public void AppendFormatted(ushort value, string? format) Parameters value ushort format string AppendFormatted(uint) public void AppendFormatted(uint value) Parameters value uint AppendFormatted(uint, int) public void AppendFormatted(uint value, int alignment) Parameters value uint alignment int AppendFormatted(uint, int, string?) public void AppendFormatted(uint value, int alignment, string? format) Parameters value uint alignment int format string AppendFormatted(uint, string?) public void AppendFormatted(uint value, string? format) Parameters value uint format string AppendFormatted(ulong) public void AppendFormatted(ulong value) Parameters value ulong AppendFormatted(ulong, int) public void AppendFormatted(ulong value, int alignment) Parameters value ulong alignment int AppendFormatted(ulong, int, string?) public void AppendFormatted(ulong value, int alignment, string? format) Parameters value ulong alignment int format string AppendFormatted(ulong, string?) public void AppendFormatted(ulong value, string? format) Parameters value ulong format string AppendFormatted(Bounds) public void AppendFormatted(UnityEngine.Bounds value) Parameters value Bounds AppendFormatted(Bounds, int) public void AppendFormatted(UnityEngine.Bounds value, int alignment) Parameters value Bounds alignment int AppendFormatted(Bounds, int, string?) public void AppendFormatted(UnityEngine.Bounds value, int alignment, string? format) Parameters value Bounds alignment int format string AppendFormatted(Bounds, string?) public void AppendFormatted(UnityEngine.Bounds value, string? format) Parameters value Bounds format string AppendFormatted(BoundsInt) public void AppendFormatted(UnityEngine.BoundsInt value) Parameters value BoundsInt AppendFormatted(BoundsInt, int) public void AppendFormatted(UnityEngine.BoundsInt value, int alignment) Parameters value BoundsInt alignment int AppendFormatted(BoundsInt, int, string?) public void AppendFormatted(UnityEngine.BoundsInt value, int alignment, string? format) Parameters value BoundsInt alignment int format string AppendFormatted(BoundsInt, string?) public void AppendFormatted(UnityEngine.BoundsInt value, string? format) Parameters value BoundsInt format string AppendFormatted(Color) public void AppendFormatted(UnityEngine.Color value) Parameters value Color AppendFormatted(Color, int) public void AppendFormatted(UnityEngine.Color value, int alignment) Parameters value Color alignment int AppendFormatted(Color, int, string?) public void AppendFormatted(UnityEngine.Color value, int alignment, string? format) Parameters value Color alignment int format string AppendFormatted(Color, string?) public void AppendFormatted(UnityEngine.Color value, string? format) Parameters value Color format string AppendFormatted(Color32) public void AppendFormatted(UnityEngine.Color32 value) Parameters value Color32 AppendFormatted(Color32, int) public void AppendFormatted(UnityEngine.Color32 value, int alignment) Parameters value Color32 alignment int AppendFormatted(Color32, int, string?) public void AppendFormatted(UnityEngine.Color32 value, int alignment, string? format) Parameters value Color32 alignment int format string AppendFormatted(Color32, string?) public void AppendFormatted(UnityEngine.Color32 value, string? format) Parameters value Color32 format string AppendFormatted(Matrix4x4) public void AppendFormatted(UnityEngine.Matrix4x4 value) Parameters value Matrix4x4 AppendFormatted(Matrix4x4, int) public void AppendFormatted(UnityEngine.Matrix4x4 value, int alignment) Parameters value Matrix4x4 alignment int AppendFormatted(Matrix4x4, int, string?) public void AppendFormatted(UnityEngine.Matrix4x4 value, int alignment, string? format) Parameters value Matrix4x4 alignment int format string AppendFormatted(Matrix4x4, string?) public void AppendFormatted(UnityEngine.Matrix4x4 value, string? format) Parameters value Matrix4x4 format string AppendFormatted(Plane) public void AppendFormatted(UnityEngine.Plane value) Parameters value Plane AppendFormatted(Plane, int) public void AppendFormatted(UnityEngine.Plane value, int alignment) Parameters value Plane alignment int AppendFormatted(Plane, int, string?) public void AppendFormatted(UnityEngine.Plane value, int alignment, string? format) Parameters value Plane alignment int format string AppendFormatted(Plane, string?) public void AppendFormatted(UnityEngine.Plane value, string? format) Parameters value Plane format string AppendFormatted(Quaternion) public void AppendFormatted(UnityEngine.Quaternion value) Parameters value Quaternion AppendFormatted(Quaternion, int) public void AppendFormatted(UnityEngine.Quaternion value, int alignment) Parameters value Quaternion alignment int AppendFormatted(Quaternion, int, string?) public void AppendFormatted(UnityEngine.Quaternion value, int alignment, string? format) Parameters value Quaternion alignment int format string AppendFormatted(Quaternion, string?) public void AppendFormatted(UnityEngine.Quaternion value, string? format) Parameters value Quaternion format string AppendFormatted(Ray) public void AppendFormatted(UnityEngine.Ray value) Parameters value Ray AppendFormatted(Ray, int) public void AppendFormatted(UnityEngine.Ray value, int alignment) Parameters value Ray alignment int AppendFormatted(Ray, int, string?) public void AppendFormatted(UnityEngine.Ray value, int alignment, string? format) Parameters value Ray alignment int format string AppendFormatted(Ray, string?) public void AppendFormatted(UnityEngine.Ray value, string? format) Parameters value Ray format string AppendFormatted(Ray2D) public void AppendFormatted(UnityEngine.Ray2D value) Parameters value Ray2D AppendFormatted(Ray2D, int) public void AppendFormatted(UnityEngine.Ray2D value, int alignment) Parameters value Ray2D alignment int AppendFormatted(Ray2D, int, string?) public void AppendFormatted(UnityEngine.Ray2D value, int alignment, string? format) Parameters value Ray2D alignment int format string AppendFormatted(Ray2D, string?) public void AppendFormatted(UnityEngine.Ray2D value, string? format) Parameters value Ray2D format string AppendFormatted(Rect) public void AppendFormatted(UnityEngine.Rect value) Parameters value Rect AppendFormatted(Rect, int) public void AppendFormatted(UnityEngine.Rect value, int alignment) Parameters value Rect alignment int AppendFormatted(Rect, int, string?) public void AppendFormatted(UnityEngine.Rect value, int alignment, string? format) Parameters value Rect alignment int format string AppendFormatted(Rect, string?) public void AppendFormatted(UnityEngine.Rect value, string? format) Parameters value Rect format string AppendFormatted(RectInt) public void AppendFormatted(UnityEngine.RectInt value) Parameters value RectInt AppendFormatted(RectInt, int) public void AppendFormatted(UnityEngine.RectInt value, int alignment) Parameters value RectInt alignment int AppendFormatted(RectInt, int, string?) public void AppendFormatted(UnityEngine.RectInt value, int alignment, string? format) Parameters value RectInt alignment int format string AppendFormatted(RectInt, string?) public void AppendFormatted(UnityEngine.RectInt value, string? format) Parameters value RectInt format string AppendFormatted(RectOffset) public void AppendFormatted(UnityEngine.RectOffset value) Parameters value RectOffset AppendFormatted(RectOffset, int) public void AppendFormatted(UnityEngine.RectOffset value, int alignment) Parameters value RectOffset alignment int AppendFormatted(RectOffset, int, string?) public void AppendFormatted(UnityEngine.RectOffset value, int alignment, string? format) Parameters value RectOffset alignment int format string AppendFormatted(RectOffset, string?) public void AppendFormatted(UnityEngine.RectOffset value, string? format) Parameters value RectOffset format string AppendFormatted(Vector2) public void AppendFormatted(UnityEngine.Vector2 value) Parameters value Vector2 AppendFormatted(Vector2, int) public void AppendFormatted(UnityEngine.Vector2 value, int alignment) Parameters value Vector2 alignment int AppendFormatted(Vector2, int, string?) public void AppendFormatted(UnityEngine.Vector2 value, int alignment, string? format) Parameters value Vector2 alignment int format string AppendFormatted(Vector2, string?) public void AppendFormatted(UnityEngine.Vector2 value, string? format) Parameters value Vector2 format string AppendFormatted(Vector2Int) public void AppendFormatted(UnityEngine.Vector2Int value) Parameters value Vector2Int AppendFormatted(Vector2Int, int) public void AppendFormatted(UnityEngine.Vector2Int value, int alignment) Parameters value Vector2Int alignment int AppendFormatted(Vector2Int, int, string?) public void AppendFormatted(UnityEngine.Vector2Int value, int alignment, string? format) Parameters value Vector2Int alignment int format string AppendFormatted(Vector2Int, string?) public void AppendFormatted(UnityEngine.Vector2Int value, string? format) Parameters value Vector2Int format string AppendFormatted(Vector3) public void AppendFormatted(UnityEngine.Vector3 value) Parameters value Vector3 AppendFormatted(Vector3, int) public void AppendFormatted(UnityEngine.Vector3 value, int alignment) Parameters value Vector3 alignment int AppendFormatted(Vector3, int, string?) public void AppendFormatted(UnityEngine.Vector3 value, int alignment, string? format) Parameters value Vector3 alignment int format string AppendFormatted(Vector3, string?) public void AppendFormatted(UnityEngine.Vector3 value, string? format) Parameters value Vector3 format string AppendFormatted(Vector3Int) public void AppendFormatted(UnityEngine.Vector3Int value) Parameters value Vector3Int AppendFormatted(Vector3Int, int) public void AppendFormatted(UnityEngine.Vector3Int value, int alignment) Parameters value Vector3Int alignment int AppendFormatted(Vector3Int, int, string?) public void AppendFormatted(UnityEngine.Vector3Int value, int alignment, string? format) Parameters value Vector3Int alignment int format string AppendFormatted(Vector3Int, string?) public void AppendFormatted(UnityEngine.Vector3Int value, string? format) Parameters value Vector3Int format string AppendFormatted(Vector4) public void AppendFormatted(UnityEngine.Vector4 value) Parameters value Vector4 AppendFormatted(Vector4, int) public void AppendFormatted(UnityEngine.Vector4 value, int alignment) Parameters value Vector4 alignment int AppendFormatted(Vector4, int, string?) public void AppendFormatted(UnityEngine.Vector4 value, int alignment, string? format) Parameters value Vector4 alignment int format string AppendFormatted(Vector4, string?) public void AppendFormatted(UnityEngine.Vector4 value, string? format) Parameters value Vector4 format string AppendFormatted<T>(T) Writes the specified value to the handler. public void AppendFormatted<T>(T value) Parameters value T The value to write. Type Parameters T The type of the value to write. AppendFormatted<T>(T, int) Writes the specified value to the handler. public void AppendFormatted<T>(T value, int alignment) Parameters value T The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. Type Parameters T The type of the value to write. AppendFormatted<T>(T, int, string?) Writes the specified value to the handler. public void AppendFormatted<T>(T value, int alignment, string? format) Parameters value T The value to write. alignment int Minimum number of characters that should be written for this value. If the value is negative, it indicates left-aligned and the required minimum is the absolute value. format string The format string. Type Parameters T The type of the value to write. AppendFormatted<T>(T, string?) Writes the specified value to the handler. public void AppendFormatted<T>(T value, string? format) Parameters value T The value to write. format string The format string. Type Parameters T The type of the value to write. AppendLiteral(string) Writes the specified string to the handler. public void AppendLiteral(string value) Parameters value string The string to write. ToString() Gets the built string. public override string ToString() Returns string The built string. ToStringAndClear() Gets the built string and clears the handler. public string ToStringAndClear() Returns string The built string. Remarks This releases any resources used by the handler. The method should be invoked only once and as the last thing performed on the handler. Subsequent use is erroneous, ill-defined, and may destabilize the process, as may using any other copies of the handler after ToStringAndClear is called on any one of them."
  },
  "api/System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.html",
    "title": "Class InterpolatedStringHandlerArgumentAttribute | |",
    "keywords": "Class InterpolatedStringHandlerArgumentAttribute Namespace System.Runtime.CompilerServices Indicates which arguments to a method involving an interpolated string handler should be passed to that handler. [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = false)] public sealed class InterpolatedStringHandlerArgumentAttribute : Attribute Inheritance object Attribute InterpolatedStringHandlerArgumentAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InterpolatedStringHandlerArgumentAttribute(string) Initializes a new instance of the InterpolatedStringHandlerArgumentAttribute class. public InterpolatedStringHandlerArgumentAttribute(string argument) Parameters argument string The name of the argument that should be passed to the handler. Remarks The empty string may be used as the name of the receiver in an instance method. InterpolatedStringHandlerArgumentAttribute(params string[]) Initializes a new instance of the InterpolatedStringHandlerArgumentAttribute class. public InterpolatedStringHandlerArgumentAttribute(params string[] arguments) Parameters arguments string[] The names of the arguments that should be passed to the handler. Remarks The empty string may be used as the name of the receiver in an instance method. Properties Arguments Gets the names of the arguments that should be passed to the handler. public string[] Arguments { get; } Property Value string[] Remarks The empty string may be used as the name of the receiver in an instance method."
  },
  "api/System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute.html": {
    "href": "api/System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute.html",
    "title": "Class InterpolatedStringHandlerAttribute | |",
    "keywords": "Class InterpolatedStringHandlerAttribute Namespace System.Runtime.CompilerServices Indicates the attributed type is to be used as an interpolated string handler. [AttributeUsage(AttributeTargets.Class|AttributeTargets.Struct, AllowMultiple = false, Inherited = false)] public sealed class InterpolatedStringHandlerAttribute : Attribute Inheritance object Attribute InterpolatedStringHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors InterpolatedStringHandlerAttribute() Initializes the InterpolatedStringHandlerAttribute. public InterpolatedStringHandlerAttribute()"
  },
  "api/System.Runtime.CompilerServices.IsExternalInit.html": {
    "href": "api/System.Runtime.CompilerServices.IsExternalInit.html",
    "title": "Class IsExternalInit | |",
    "keywords": "Class IsExternalInit Namespace System.Runtime.CompilerServices public sealed class IsExternalInit Inheritance object IsExternalInit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/System.Runtime.CompilerServices.html": {
    "href": "api/System.Runtime.CompilerServices.html",
    "title": "Namespace System.Runtime.CompilerServices | |",
    "keywords": "Namespace System.Runtime.CompilerServices Classes CallerArgumentExpressionAttribute InterpolatedStringHandlerArgumentAttribute Indicates which arguments to a method involving an interpolated string handler should be passed to that handler. InterpolatedStringHandlerAttribute Indicates the attributed type is to be used as an interpolated string handler. IsExternalInit Structs DefaultInterpolatedStringHandler Provides a handler used by the language compiler to process interpolated strings into string instances."
  },
  "api/VContainer.Unity.CustomContainerBuilderUnityExtensions.html": {
    "href": "api/VContainer.Unity.CustomContainerBuilderUnityExtensions.html",
    "title": "Class CustomContainerBuilderUnityExtensions | |",
    "keywords": "Class CustomContainerBuilderUnityExtensions Namespace VContainer.Unity ContainerBuilderUnityExtensionsにはない、カスタムの拡張メソッド. public static class CustomContainerBuilderUnityExtensions Inheritance object CustomContainerBuilderUnityExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods RegisterComponent(IContainerBuilder, Component) Register a component to the container. public static RegistrationBuilder RegisterComponent(this IContainerBuilder builder, Component component) Parameters builder IContainerBuilder IContainerBuilder. component Component Component. Returns RegistrationBuilder RegistrationBuilder."
  },
  "api/VContainer.Unity.html": {
    "href": "api/VContainer.Unity.html",
    "title": "Namespace VContainer.Unity | |",
    "keywords": "Namespace VContainer.Unity Classes CustomContainerBuilderUnityExtensions ContainerBuilderUnityExtensionsにはない、カスタムの拡張メソッド."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2024 Masatake Iwasaki Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "MinimalUtility | |",
    "keywords": "MinimalUtility Minimal utility library. 1. Installation Add the package via git from Package Manager. If you are using Unity 2019.1 or later, you can use Package Manager to install a package via git. https://github.com/kochounoyume/MinimalUtility.git?path=Packages/MinimalUtility 2. StyleCopAnalyzers The repository incorporates StyleCopAnalyzers to improve development efficiency. Some rules have been disabled, but naming conventions and other rules basically follow those set out by StyleCopAnalyzers. Note As mentioned earlier, this repository contains StyleCopAnalyzers, but that has no effect on importing them into your Unity environment as a package. StyleCopAnalyzers is merely a code maintenance role in this repository. Therefore, you do not have to follow the naming conventions and other rules of StyleCopAnalyzers when you introduce the MinimalUtility. License MIT License Copyright (c) Tunnel Vision Laboratories, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}