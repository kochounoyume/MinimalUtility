{
  "api/Global.UnityWebRequestHttpMessageHandler.html": {
    "href": "api/Global.UnityWebRequestHttpMessageHandler.html",
    "title": "Class UnityWebRequestHttpMessageHandler | |",
    "keywords": "Class UnityWebRequestHttpMessageHandler Namespace Global public class UnityWebRequestHttpMessageHandler : HttpMessageHandler, IDisposable Inheritance object HttpMessageHandler UnityWebRequestHttpMessageHandler Implements IDisposable Inherited Members HttpMessageHandler.Dispose() HttpMessageHandler.Dispose(bool) HttpMessageHandler.Send(HttpRequestMessage, CancellationToken) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Methods SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage, CancellationToken cancellationToken) Parameters requestMessage HttpRequestMessage cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null. SendAsync(HttpRequestMessage, CancellationToken) Send an HTTP request as an asynchronous operation. protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage requestMessage, CancellationToken cancellationToken) Parameters requestMessage HttpRequestMessage cancellationToken CancellationToken The cancellation token to cancel operation. Returns Task<HttpResponseMessage> The task object representing the asynchronous operation. Exceptions ArgumentNullException The request was null."
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | |",
    "keywords": "Namespace Classes UnityWebRequestHttpMessageHandler"
  },
  "api/MinimalUtility.ButtonAttribute.html": {
    "href": "api/MinimalUtility.ButtonAttribute.html",
    "title": "Class ButtonAttribute | |",
    "keywords": "Class ButtonAttribute Namespace MinimalUtility 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. [Conditional(\"UNITY_EDITOR\")] [AttributeUsage(AttributeTargets.Method, AllowMultiple = true)] public sealed class ButtonAttribute : Attribute Inheritance object Attribute ButtonAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ButtonAttribute(params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(params object[] parameters) Parameters parameters object[] 引数. ButtonAttribute(string, params object[]) Initializes a new instance of the ButtonAttribute class. public ButtonAttribute(string buttonName, params object[] parameters) Parameters buttonName string ボタンの名前. parameters object[] 引数. Properties ButtonName ボタンの名前. public string ButtonName { get; set; } Property Value string Parameters 引数. public ref readonly object[] Parameters { get; } Property Value object[]"
  },
  "api/MinimalUtility.CommonObjectPool-1.PoolSizeSetting.html": {
    "href": "api/MinimalUtility.CommonObjectPool-1.PoolSizeSetting.html",
    "title": "Struct CommonObjectPool<T>.PoolSizeSetting | |",
    "keywords": "Struct CommonObjectPool<T>.PoolSizeSetting Namespace MinimalUtility プールの初期容量と最大サイズを指定する構造体. public readonly struct CommonObjectPool<T>.PoolSizeSetting Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors PoolSizeSetting(in int, in int) Initializes a new instance of the CommonObjectPool<T>.PoolSizeSetting struct. public PoolSizeSetting(in int defaultCapacity, in int maxSize) Parameters defaultCapacity int スタックが作成されるときの初期容量. maxSize int プールの最大サイズ."
  },
  "api/MinimalUtility.CommonObjectPool-1.html": {
    "href": "api/MinimalUtility.CommonObjectPool-1.html",
    "title": "Class CommonObjectPool<T> | |",
    "keywords": "Class CommonObjectPool<T> Namespace MinimalUtility 汎用オブジェクトプール実装. public class CommonObjectPool<T> : IDisposable, IObjectPool<T>, UnityEngine.Pool.IObjectPool<T> where T : MonoBehaviour Type Parameters T プールするオブジェクトの型. Inheritance object CommonObjectPool<T> Implements IDisposable IObjectPool<T> IObjectPool<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods DisposableExtensions.AddTo<T>(T, ref IDisposable) Constructors CommonObjectPool(T, Transform, PoolSizeSetting) Initializes a new instance of the CommonObjectPool<T> class. public CommonObjectPool(T prefab, Transform root, CommonObjectPool<T>.PoolSizeSetting setting) Parameters prefab T プール対象のプレハブ. root Transform プールから取得されたインスタンスに指定する親オブジェクト. setting CommonObjectPool<T>.PoolSizeSetting プールの初期容量と最大サイズ. Properties CountInactive public int CountInactive { get; } Property Value int Methods Clear() public void Clear() Get() public T Get() Returns T Get(out T) public PooledObject<T> Get(out T v) Parameters v T Returns PooledObject<T> GetWithToken(out T) プールからインスタンスとキャンセルトークンを取得する.プールが空の場合は、新しいインスタンスが作成される. public CancellationToken GetWithToken(out T v) Parameters v T 取得したインスタンス. Returns CancellationToken インスタンスがプールに戻ったときにキャンセルされるトークン. Release(T) public void Release(T element) Parameters element T ReleaseAll(Action<T>) 取得済みの全てのオブジェクトを解放する. public void ReleaseAll(Action<T> preReleaseCallback = null) Parameters preReleaseCallback Action<T> 解放前に呼び出すコールバック."
  },
  "api/MinimalUtility.ComponentExtensions.html": {
    "href": "api/MinimalUtility.ComponentExtensions.html",
    "title": "Class ComponentExtensions | |",
    "keywords": "Class ComponentExtensions Namespace MinimalUtility Componentの拡張メソッド. public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetComponentInOnlyChild<T>(Component) 子オブジェクトのTコンポーネントを取得する. Component.GetComponentInChildren<T>()と異なり、孫オブジェクト以降は検索しない. public static T GetComponentInOnlyChild<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns T 取得したコンポーネントインスタンス. Type Parameters T 取得したいコンポーネントの型. GetComponentsInOnlyChildren<T>(Component) 子オブジェクトのTコンポーネントを全て取得する. Component.GetComponentsInChildren<T>()と異なり、孫オブジェクト以降は検索しない. public static IList<T> GetComponentsInOnlyChildren<T>(this Component self) where T : Component Parameters self Component 対象のComponent. Returns IList<T> 取得したコンポーネントインスタンスのコレクション. Type Parameters T 取得したいコンポーネントの型. TryGetComponentInOnlyChild<T>(Component, out T) 子オブジェクトのTコンポーネントを取得する. public static bool TryGetComponentInOnlyChild<T>(this Component self, out T component) where T : Component Parameters self Component 対象のComponent. component T 取得したコンポーネントインスタンス. Returns bool コンポーネントが取得できた場合はtrue. Type Parameters T 取得したいコンポーネントの型."
  },
  "api/MinimalUtility.DisposableExtensions.html": {
    "href": "api/MinimalUtility.DisposableExtensions.html",
    "title": "Class DisposableExtensions | |",
    "keywords": "Class DisposableExtensions Namespace MinimalUtility IDisposableの拡張メソッド. public static class DisposableExtensions Inheritance object DisposableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddTo<T>(T, ref IDisposable) IDisposableを指定したIDisposableコンテナに追加します. public static void AddTo<T>(this T disposable, ref IDisposable disposableContainer) where T : class, IDisposable Parameters disposable T 任意のIDisposable実装クラスの参照. disposableContainer IDisposable 追加先のIDisposableコンテナ. Type Parameters T 追加したIDisposable."
  },
  "api/MinimalUtility.Editor.SimpleGaugeEditor.html": {
    "href": "api/MinimalUtility.Editor.SimpleGaugeEditor.html",
    "title": "Class SimpleGaugeEditor | |",
    "keywords": "Class SimpleGaugeEditor Namespace MinimalUtility.Editor SimpleGaugeのカスタムエディタ. public class SimpleGaugeEditor : UnityEditor.Editor Inheritance object SimpleGaugeEditor Methods OnInspectorGUI() public override void OnInspectorGUI()"
  },
  "api/MinimalUtility.Editor.html": {
    "href": "api/MinimalUtility.Editor.html",
    "title": "Namespace MinimalUtility.Editor | |",
    "keywords": "Namespace MinimalUtility.Editor Classes SimpleGaugeEditor SimpleGaugeのカスタムエディタ."
  },
  "api/MinimalUtility.EmptyGraphic.html": {
    "href": "api/MinimalUtility.EmptyGraphic.html",
    "title": "Class EmptyGraphic | |",
    "keywords": "Class EmptyGraphic Namespace MinimalUtility 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき public class EmptyGraphic : Graphic Inheritance object EmptyGraphic Derived MinimalSelectableGraphic Methods OnPopulateMesh(VertexHelper) protected override void OnPopulateMesh(VertexHelper vh) Parameters vh VertexHelper SetMaterialDirty() public override void SetMaterialDirty() SetVerticesDirty() public override void SetVerticesDirty()"
  },
  "api/MinimalUtility.EqualityComparer.html": {
    "href": "api/MinimalUtility.EqualityComparer.html",
    "title": "Class EqualityComparer | |",
    "keywords": "Class EqualityComparer Namespace MinimalUtility EqualityComparer<T>の拡張クラス. public static class EqualityComparer Inheritance object EqualityComparer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Create<T>(Func<T, T, bool>, Func<T, int>) 指定した比較処理を使用してEqualityComparer<T>を生成します. public static EqualityComparer<T> Create<T>(Func<T, T, bool> equals, Func<T, int> getHashCode) Parameters equals Func<T, T, bool> Equals(T, T)に使用する処理. getHashCode Func<T, int> GetHashCode(T)に使用する処理. Returns EqualityComparer<T> 生成されたEqualityComparer<T>. Type Parameters T 比較対象の型. Exceptions ArgumentNullException equalsがnullです. NotSupportedException getHashCodeがnullです."
  },
  "api/MinimalUtility.GenerateStringConverterAttribute.html": {
    "href": "api/MinimalUtility.GenerateStringConverterAttribute.html",
    "title": "Class GenerateStringConverterAttribute | |",
    "keywords": "Class GenerateStringConverterAttribute Namespace MinimalUtility Enumの文字列変換クラスを自動生成するための属性. 以下のようなコードが自動生成されます. using System; namespace MinimalUtility { public partial class MemoryUnitStringConverter { private readonly string[] values = new string[] { \"B\", \"KB\", \"MB\", \"GB\", }; public ReadOnlySpan<string> MemberValues => values; public ref readonly string Convert(in DebugProfiler.MemoryUnit value) { switch ((int)value) { case 0: return ref values[0]; case 1: return ref values[1]; case 2: return ref values[2]; case 3: return ref values[3]; default: return ref string.Empty; } } public DebugProfiler.MemoryUnit ReverseConvert(in string str) { switch (Array.IndexOf(values, str)) { case 0: return DebugProfiler.MemoryUnit.B; case 1: return DebugProfiler.MemoryUnit.KB; case 2: return DebugProfiler.MemoryUnit.MB; case 3: return DebugProfiler.MemoryUnit.GB; default: throw new InvalidCastException(str); } } } } [AttributeUsage(AttributeTargets.Enum, Inherited = false, AllowMultiple = false)] public sealed class GenerateStringConverterAttribute : Attribute Inheritance object Attribute GenerateStringConverterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateStringConverterAttribute(bool) Initializes a new instance of the GenerateStringConverterAttribute class. public GenerateStringConverterAttribute(bool autoGenerate = false) Parameters autoGenerate bool trueの場合、列挙を列挙のプロパティ名と同じ文字列に変換するクラスを自動的に生成します."
  },
  "api/MinimalUtility.IObjectPool-1.html": {
    "href": "api/MinimalUtility.IObjectPool-1.html",
    "title": "Interface IObjectPool<T> | |",
    "keywords": "Interface IObjectPool<T> Namespace MinimalUtility ObjectPoolを提供するインターフェイス. public interface IObjectPool<T> : UnityEngine.Pool.IObjectPool<T> where T : MonoBehaviour Type Parameters T プールするオブジェクトの型. Methods GetWithToken(out T) プールからインスタンスとキャンセルトークンを取得する.プールが空の場合は、新しいインスタンスが作成される. CancellationToken GetWithToken(out T v) Parameters v T 取得したインスタンス. Returns CancellationToken インスタンスがプールに戻ったときにキャンセルされるトークン. ReleaseAll(Action<T>) 取得済みの全てのオブジェクトを解放する. void ReleaseAll(Action<T> preReleaseCallback = null) Parameters preReleaseCallback Action<T> 解放前に呼び出すコールバック."
  },
  "api/MinimalUtility.Math.html": {
    "href": "api/MinimalUtility.Math.html",
    "title": "Class Math | |",
    "keywords": "Class Math Namespace MinimalUtility 最小限の数学関数. public static class Math Inheritance object Math Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Deg2Rad 度からラジアンに変換する定数（読み取り専用）. public const float Deg2Rad = 0.017453292 Field Value float Infinity 無限大（読み取り専用）. public const float Infinity = Infinity Field Value float NegativeInfinity 負の無限大（読み取り専用）. public const float NegativeInfinity = -Infinity Field Value float PI 円周率（読み取り専用）. public const float PI = 3.1415927 Field Value float Rad2Deg ラジアンから度に変換する定数（読み取り専用）. public const float Rad2Deg = 57.29578 Field Value float Properties Epsilon ごくわずかな浮動小数点の値（読み取り専用）. public static float Epsilon { get; } Property Value float Methods Abs(in int) /value/の絶対値を返します. public static int Abs(in int value) Parameters value int 任意の整数値. Returns int 求めた絶対値. Abs(in float) /f/の絶対値を返します. public static float Abs(in float f) Parameters f float 任意の浮動小数点値. Returns float 求めた絶対値. Approximately(in float, in float) 2つの浮動小数点値を比較し、近似している場合は true を返します. public static bool Approximately(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns bool 近似している場合は true. Ceil(in float) 切り上げて整数値を返します. ex.)2.3f -> 3.0f . public static float Ceil(in float f) Parameters f float 任意の浮動小数点値. Returns float 切り上げた値. CeilToInt(in float) 切り上げて整数値を返します. ex.)2.3f -> 3 . public static int CeilToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 切り上げた値. Clamp(in int, in int, in int) valueを最小値と最大値の間に制限します. ex.)Clamp(2, -1, 1) -> 1 . public static int Clamp(in int value, in int min, in int max) Parameters value int 制限する値. min int 最小値. max int 最大値. Returns int 制限された値. Clamp(in float, in float, in float) valueを最小値と最大値の間に制限します. ex.)Clamp(2.3f, 0.2f, 1.2f) -> 1.2f . public static float Clamp(in float value, in float min, in float max) Parameters value float 制限する値. min float 最小値. max float 最大値. Returns float 制限された値. Clamp01(in float) valueを0.0fから1.0fの間に制限します. ex.)Clamp01(2.3f) -> 1.0f . public static float Clamp01(in float value) Parameters value float 制限する値. Returns float 制限された値. Cos(in float) コサイン（余弦）を返します. public static float Cos(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は-1から+1の間. Floor(in float) 切り捨てて整数値を返します. ex.)2.3f -> 2.0f . public static float Floor(in float f) Parameters f float 任意の浮動小数点値. Returns float 切り捨てた値. FloorToInt(in float) 切り捨てて整数値を返します. ex.)2.3f -> 2 . public static int FloorToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 切り捨てた値. Lerp(in float, in float, in float) aとbの間を線形補間します. ex.)Lerp(2.5f, 3.5f, 0.5f) -> 3.0f . public static float Lerp(in float a, in float b, in float t) Parameters a float 開始値. b float 終了値. t float 補間値. Returns float 補間された値. LerpUnClamped(in float, in float, in float) aとbの間を線形補間します. ex.)LerpUnClamped(2.5f, 3.5f, 0.5f) -> 3.0f . public static float LerpUnClamped(in float a, in float b, in float t) Parameters a float 開始値. b float 終了値. t float 補間値. Returns float 補間された値. Max(in int, in int) 2つ以上の値から最大値を返します. public static int Max(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最大値. Max(in float, in float) 2つ以上の値から最大値を返します. public static float Max(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最大値. Min(in int, in int) 2つ以上の値から最小値を返します. public static int Min(in int a, in int b) Parameters a int 比較する一つ目の整数値. b int 比較する二つ目の整数値. Returns int 最小値. Min(in float, in float) 2つ以上の値から最小値を返します. public static float Min(in float a, in float b) Parameters a float 比較する一つ目の浮動小数点値. b float 比較する二つ目の浮動小数点値. Returns float 最小値. Pow(in float, in float) fをp乗した値を返します. public static float Pow(in float f, in float p) Parameters f float 任意の浮動小数点値. p float fを掛ける回数. Returns float 戻り値は0以上の値. Round(in float) 四捨五入して整数値を返します. ex.)2.3f -> 2.0f, 2.5f -> 3.0f . public static float Round(in float f) Parameters f float 任意の浮動小数点値. Returns float 四捨五入した値. RoundToInt(in float) 四捨五入して整数値を返します. ex.)2.3f -> 2, 2.5f -> 3 . public static int RoundToInt(in float f) Parameters f float 任意の浮動小数点値. Returns int 四捨五入した値. Sin(in float) サイン（正弦）を返します. public static float Sin(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は-1から+1の間. Sqrt(in float) fの平方根を返します. public static float Sqrt(in float f) Parameters f float 非負の浮動小数点値. Returns float 戻り値は0以上の値. Tan(in float) タンジェント（正接）を返します. public static float Tan(in float f) Parameters f float ラジアン単位の角度. Returns float 戻り値は無限大から+無限大の間."
  },
  "api/MinimalUtility.MinimalSelectableGraphic.html": {
    "href": "api/MinimalUtility.MinimalSelectableGraphic.html",
    "title": "Class MinimalSelectableGraphic | |",
    "keywords": "Class MinimalSelectableGraphic Namespace MinimalUtility UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる public sealed class MinimalSelectableGraphic : EmptyGraphic Inheritance object EmptyGraphic MinimalSelectableGraphic Inherited Members EmptyGraphic.SetMaterialDirty() EmptyGraphic.SetVerticesDirty() Methods CrossFadeColor(Color, float, bool, bool) public override void CrossFadeColor(Color targetColor, float duration, bool ignoreTimeScale, bool useAlpha) Parameters targetColor Color duration float ignoreTimeScale bool useAlpha bool Start() protected override void Start()"
  },
  "api/MinimalUtility.ObjectUtility.html": {
    "href": "api/MinimalUtility.ObjectUtility.html",
    "title": "Class ObjectUtility | |",
    "keywords": "Class ObjectUtility Namespace MinimalUtility UnityEngine.Objectに関連するユーティリティ. public static class ObjectUtility Inheritance object ObjectUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetNullCheck<T>(ref T, Func<T>) UnityEngine.Objectのnullチェックを行い、nullの場合は指定のファクトリメソッドで生成する. public static ref T GetNullCheck<T>(ref T target, Func<T> factory) where T : UnityEngine.Object Parameters target T 対象のUnityEngine.Object. factory Func<T> nullの場合に生成するファクトリメソッド. Returns T 生成したUnityEngine.Objectの参照. Type Parameters T 生成するUnityEngine.Objectの型. GetNullCheck<T, TState>(ref T, TState, Func<TState, T>) UnityEngine.Objectのnullチェックを行い、nullの場合は指定のファクトリメソッドで生成する. public static ref T GetNullCheck<T, TState>(ref T target, TState state, Func<TState, T> factory) where T : UnityEngine.Object Parameters target T 対象のUnityEngine.Object. state TState ファクトリメソッドに渡す引数. factory Func<TState, T> nullの場合に生成するファクトリメソッド. Returns T 生成したUnityEngine.Objectの参照. Type Parameters T 生成するUnityEngine.Objectの型. TState ファクトリメソッドに渡す引数の型. TryGetNullCheck<T>(Func<T>, out T) 特定のUnityEngine.Objectについて、指定の処理の実行で生成できたかnullチェックを行う. public static bool TryGetNullCheck<T>(Func<T> factory, out T target) where T : UnityEngine.Object Parameters factory Func<T> 生成処理. target T 生成したUnityEngine.Objectの参照. Returns bool 生成できた場合はtrue. Type Parameters T 生成するUnityEngine.Objectの型. TryGetNullCheck<T, TState>(TState, Func<TState, T>, out T) 特定のUnityEngine.Objectについて、指定の処理の実行で生成できたかnullチェックを行う. public static bool TryGetNullCheck<T, TState>(TState state, Func<TState, T> factory, out T target) where T : UnityEngine.Object Parameters state TState ファクトリメソッドに渡す引数. factory Func<TState, T> 生成処理. target T 生成したUnityEngine.Objectの参照. Returns bool 生成できた場合はtrue. Type Parameters T 生成するUnityEngine.Objectの型. TState ファクトリメソッドに渡す引数の型."
  },
  "api/MinimalUtility.RectTransformExtensions.html": {
    "href": "api/MinimalUtility.RectTransformExtensions.html",
    "title": "Class RectTransformExtensions | |",
    "keywords": "Class RectTransformExtensions Namespace MinimalUtility RectTransformの拡張メソッド. public static class RectTransformExtensions Inheritance object RectTransformExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetSizeDelta(RectTransform) RectTransform.sizeDeltaよりも安全なサイズ取得. public static Vector2 GetSizeDelta(this RectTransform target) Parameters target RectTransform 対象のRectTransform. Returns Vector2 対象のサイズ. SetFullStretch(RectTransform, in float, in float, in float, in float) RectTransformを全面的に伸ばす(stretch * stretchにする). public static void SetFullStretch(this RectTransform target, in float left = 0, in float right = 0, in float top = 0, in float bottom = 0) Parameters target RectTransform 対象のRectTransform. left float 左端のオフセット. right float 右端のオフセット. top float 上端のオフセット. bottom float 下端のオフセット. SetSafeSize(RectTransform, in float, in float) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, in float width, in float height) Parameters target RectTransform 対象のRectTransform. width float 横の長さ. height float 縦の長さ. SetSafeSize(RectTransform, Vector2) RectTransform.sizeDeltaよりも安全なサイズ設定. public static void SetSafeSize(this RectTransform target, Vector2 size) Parameters target RectTransform 対象のRectTransform. size Vector2 任意の縦横サイズ. SetSafeSizeHeight(RectTransform, in float) RectTransform.sizeDeltaよりも安全な縦幅設定. public static void SetSafeSizeHeight(this RectTransform target, in float height) Parameters target RectTransform 対象のRectTransform. height float 縦の長さ. SetSafeSizeWidth(RectTransform, in float) RectTransform.sizeDeltaよりも安全な横幅設定. public static void SetSafeSizeWidth(this RectTransform target, in float width) Parameters target RectTransform 対象のRectTransform. width float 横の長さ."
  },
  "api/MinimalUtility.SafeAreaAdjuster.html": {
    "href": "api/MinimalUtility.SafeAreaAdjuster.html",
    "title": "Class SafeAreaAdjuster | |",
    "keywords": "Class SafeAreaAdjuster Namespace MinimalUtility セーフエリア調整スクリプト. public class SafeAreaAdjuster : MonoBehaviour Inheritance object SafeAreaAdjuster"
  },
  "api/MinimalUtility.SimpleGauge.html": {
    "href": "api/MinimalUtility.SimpleGauge.html",
    "title": "Class SimpleGauge | |",
    "keywords": "Class SimpleGauge Namespace MinimalUtility RectMask2Dを継承利用したシンプルで綺麗なゲージ表示. public class SimpleGauge : RectMask2D Inheritance object SimpleGauge Properties Value ゲージの値(0.0 ～ 1.0). public float Value { get; set; } Property Value float Methods OnEnable() protected override void OnEnable()"
  },
  "api/MinimalUtility.SloppyDisposable-1.html": {
    "href": "api/MinimalUtility.SloppyDisposable-1.html",
    "title": "Struct SloppyDisposable<T0> | |",
    "keywords": "Struct SloppyDisposable<T0> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly ref struct SloppyDisposable<T0> Type Parameters T0 破棄時に呼び出す処理の引数の型. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SloppyDisposable(T0, Action<T0>) Initializes a new instance of the SloppyDisposable<T0> struct. public SloppyDisposable(T0 state0, Action<T0> onDispose) Parameters state0 T0 破棄時に呼び出す処理の引数. onDispose Action<T0> 破棄時に呼び出す処理. Methods Dispose() 破棄処理. public void Dispose()"
  },
  "api/MinimalUtility.SloppyDisposable-2.html": {
    "href": "api/MinimalUtility.SloppyDisposable-2.html",
    "title": "Struct SloppyDisposable<T0, T1> | |",
    "keywords": "Struct SloppyDisposable<T0, T1> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly ref struct SloppyDisposable<T0, T1> Type Parameters T0 破棄時に呼び出す処理の第一引数の型. T1 破棄時に呼び出す処理の第二引数の型. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SloppyDisposable(T0, T1, Action<T0, T1>) Initializes a new instance of the SloppyDisposable<T0, T1> struct. public SloppyDisposable(T0 state0, T1 state1, Action<T0, T1> onDispose) Parameters state0 T0 破棄時に呼び出す処理の第一引数. state1 T1 破棄時に呼び出す処理の第二引数. onDispose Action<T0, T1> 破棄時に呼び出す処理. Methods Dispose() 破棄処理. public void Dispose()"
  },
  "api/MinimalUtility.SloppyDisposable-3.html": {
    "href": "api/MinimalUtility.SloppyDisposable-3.html",
    "title": "Struct SloppyDisposable<T0, T1, T2> | |",
    "keywords": "Struct SloppyDisposable<T0, T1, T2> Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly ref struct SloppyDisposable<T0, T1, T2> Type Parameters T0 破棄時に呼び出す処理の第一引数の型. T1 破棄時に呼び出す処理の第二引数の型. T2 破棄時に呼び出す処理の第三引数の型. Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SloppyDisposable(T0, T1, T2, Action<T0, T1, T2>) Initializes a new instance of the SloppyDisposable<T0, T1, T2> struct. public SloppyDisposable(T0 state0, T1 state1, T2 state2, Action<T0, T1, T2> onDispose) Parameters state0 T0 破棄時に呼び出す処理の第一引数. state1 T1 破棄時に呼び出す処理の第二引数. state2 T2 破棄時に呼び出す処理の第三引数. onDispose Action<T0, T1, T2> 破棄時に呼び出す処理. Methods Dispose() 破棄処理. public void Dispose()"
  },
  "api/MinimalUtility.SloppyDisposable.html": {
    "href": "api/MinimalUtility.SloppyDisposable.html",
    "title": "Struct SloppyDisposable | |",
    "keywords": "Struct SloppyDisposable Namespace MinimalUtility usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. public readonly ref struct SloppyDisposable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SloppyDisposable(Action) Initializes a new instance of the SloppyDisposable struct. public SloppyDisposable(Action onDispose) Parameters onDispose Action 破棄時に呼び出す処理. Methods Dispose() 破棄処理. public void Dispose()"
  },
  "api/MinimalUtility.html": {
    "href": "api/MinimalUtility.html",
    "title": "Namespace MinimalUtility | |",
    "keywords": "Namespace MinimalUtility Classes ButtonAttribute 指定したメソッドをUnityのInspector上に表示したボタンでテスト実行できるようになる属性. CommonObjectPool<T> 汎用オブジェクトプール実装. ComponentExtensions Componentの拡張メソッド. DisposableExtensions IDisposableの拡張メソッド. EmptyGraphic 空処理のグラフィック. 想定用途：マスク時のベース, 画面全体を透明なuGUIで覆いたいとき、Buttonの判定領域を透明にしたいとき EqualityComparer EqualityComparer<T>の拡張クラス. GenerateStringConverterAttribute Enumの文字列変換クラスを自動生成するための属性. 以下のようなコードが自動生成されます. using System; namespace MinimalUtility { public partial class MemoryUnitStringConverter { private readonly string[] values = new string[] { \"B\", \"KB\", \"MB\", \"GB\", }; public ReadOnlySpan<string> MemberValues => values; public ref readonly string Convert(in DebugProfiler.MemoryUnit value) { switch ((int)value) { case 0: return ref values[0]; case 1: return ref values[1]; case 2: return ref values[2]; case 3: return ref values[3]; default: return ref string.Empty; } } public DebugProfiler.MemoryUnit ReverseConvert(in string str) { switch (Array.IndexOf(values, str)) { case 0: return DebugProfiler.MemoryUnit.B; case 1: return DebugProfiler.MemoryUnit.KB; case 2: return DebugProfiler.MemoryUnit.MB; case 3: return DebugProfiler.MemoryUnit.GB; default: throw new InvalidCastException(str); } } } } Math 最小限の数学関数. MinimalSelectableGraphic UnityEngine.UI.Selectableを使用するうえで最低限の機能を持つグラフィック. 子オブジェクトのGraphicをキャッシュして選択時に色変化を伝播させる ObjectUtility UnityEngine.Objectに関連するユーティリティ. RectTransformExtensions RectTransformの拡張メソッド. SafeAreaAdjuster セーフエリア調整スクリプト. SimpleGauge RectMask2Dを継承利用したシンプルで綺麗なゲージ表示. Structs CommonObjectPool<T>.PoolSizeSetting プールの初期容量と最大サイズを指定する構造体. SloppyDisposable usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. SloppyDisposable<T0> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. SloppyDisposable<T0, T1> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. SloppyDisposable<T0, T1, T2> usingステートメントスコープを抜けた際にコールバックを呼び出すための構造体. Interfaces IObjectPool<T> ObjectPoolを提供するインターフェイス."
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "| |",
    "keywords": "This is the documentation for the Scripting APIs of this package."
  },
  "index.html": {
    "href": "index.html",
    "title": "| |",
    "keywords": "This page redirects to the manual."
  },
  "license/LICENSE.html": {
    "href": "license/LICENSE.html",
    "title": "| |",
    "keywords": "MIT License Copyright (c) 2024 Masatake Iwasaki Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  },
  "manual/index.html": {
    "href": "manual/index.html",
    "title": "MinimalUtility | |",
    "keywords": "MinimalUtility Minimal utility library. 1. Installation Add the package via git from Package Manager. If you are using Unity 2019.1 or later, you can use Package Manager to install a package via git. https://github.com/kochounoyume/MinimalUtility.git?path=Packages/MinimalUtility 2. StyleCopAnalyzers The repository incorporates StyleCopAnalyzers to improve development efficiency. Some rules have been disabled, but naming conventions and other rules basically follow those set out by StyleCopAnalyzers. Note As mentioned earlier, this repository contains StyleCopAnalyzers, but that has no effect on importing them into your Unity environment as a package. StyleCopAnalyzers is merely a code maintenance role in this repository. Therefore, you do not have to follow the naming conventions and other rules of StyleCopAnalyzers when you introduce the MnimalUtility. License MIT License Copyright (c) Tunnel Vision Laboratories, LLC Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."
  }
}